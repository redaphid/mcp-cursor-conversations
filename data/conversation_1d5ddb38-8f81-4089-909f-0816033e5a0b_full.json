{
  "composerId": "1d5ddb38-8f81-4089-909f-0816033e5a0b",
  "richText": "{\"root\":{\"children\":[{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
  "hasLoaded": true,
  "text": "",
  "conversation": [
    {
      "type": 1,
      "bubbleId": "13d70188-c4b5-4417-95d7-20b49e05c500",
      "suggestedCodeBlocks": [],
      "relevantFiles": [
        "esbuild.js",
        "shaders/cursor/crystal-flow/knobs-2.frag",
        "shaders/cursor/crystal-flow/knobs.frag",
        "src/monaco.js",
        "src/shader-transformers/shader-wrapper.js",
        ".cursorrules",
        "shaders/cursor/crystal-flow/2.frag",
        "shaders/redaphid/kali/knobs/1.frag"
      ],
      "capabilitiesRan": {
        "mutate-request": [
          11,
          6
        ],
        "start-submit-chat": [],
        "before-submit-chat": [
          15
        ],
        "after-submit-chat": [],
        "after-apply": [],
        "composer-settled": [],
        "composer-done": [
          6
        ],
        "process-codeblock": [],
        "process-stream": [
          15
        ]
      },
      "editTrailContexts": [],
      "multiFileLinterErrors": [],
      "diffHistories": [],
      "recentLocationsHistory": [],
      "isAgentic": false,
      "fileDiffTrajectories": [],
      "existedSubsequentTerminalCommand": false,
      "existedPreviousTerminalCommand": false,
      "docsReferences": [],
      "webReferences": [],
      "attachedFoldersListDirResults": [],
      "richText": "{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"I am bundling/minifying this Javasript project that has some unusual requirements. It relies on a bunch of web workers that are dynamically imported in \",\"type\":\"text\",\"version\":1},{\"detail\":1,\"format\":0,\"mode\":\"segmented\",\"style\":\"\",\"text\":\"@AudioProcessor.js\",\"type\":\"mention\",\"version\":1,\"mentionName\":\"AudioProcessor.js\",\"storedKey\":\"230\",\"metadata\":{\"selection\":{\"type\":2,\"selectionWithoutUuid\":{\"uri\":{\"$mid\":1,\"fsPath\":\"/Users/redaphid/Projects/paper-cranes/src/audio/AudioProcessor.js\",\"external\":\"file:///Users/redaphid/Projects/paper-cranes/src/audio/AudioProcessor.js\",\"path\":\"/Users/redaphid/Projects/paper-cranes/src/audio/AudioProcessor.js\",\"scheme\":\"file\"}}},\"selectedOption\":{\"key\":\"AudioProcessor.js\",\"type\":\"file\",\"selectionPrecursor\":{\"uri\":{\"$mid\":1,\"fsPath\":\"/Users/redaphid/Projects/paper-cranes/src/audio/AudioProcessor.js\",\"external\":\"file:///Users/redaphid/Projects/paper-cranes/src/audio/AudioProcessor.js\",\"path\":\"/Users/redaphid/Projects/paper-cranes/src/audio/AudioProcessor.js\",\"scheme\":\"file\"}},\"secondaryText\":\"src/audio/AudioProcessor.js\",\"name\":\"AudioProcessor.js\",\"picture\":{},\"_score\":11,\"isSlash\":false}}},{\"detail\":1,\"format\":0,\"mode\":\"segmented\",\"style\":\"\",\"text\":\"\",\"type\":\"text\",\"version\":1},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\", and needs all the shaders, images, etc in the same directory as dist. It is very important to minimize download size. I'm currently using esbuild, but I want to use a more modern builder that will do what I need\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
      "text": "I am bundling/minifying this Javasript project that has some unusual requirements. It relies on a bunch of web workers that are dynamically imported in @AudioProcessor.js, and needs all the shaders, images, etc in the same directory as dist. It is very important to minimize download size. I'm currently using esbuild, but I want to use a more modern builder that will do what I need",
      "context": {
        "editTrailContexts": [],
        "notepads": [],
        "quotes": [],
        "selectedCommits": [],
        "selectedPullRequests": [],
        "selectedImages": [],
        "folderSelections": [],
        "fileSelections": [
          {
            "uri": {
              "$mid": 1,
              "fsPath": "/Users/redaphid/Projects/paper-cranes/esbuild.js",
              "external": "file:///Users/redaphid/Projects/paper-cranes/esbuild.js",
              "path": "/Users/redaphid/Projects/paper-cranes/esbuild.js",
              "scheme": "file"
            },
            "addedWithoutMention": true,
            "autoContext": true
          },
          {
            "uri": {
              "$mid": 1,
              "fsPath": "/Users/redaphid/Projects/paper-cranes/src/audio/AudioProcessor.js",
              "external": "file:///Users/redaphid/Projects/paper-cranes/src/audio/AudioProcessor.js",
              "path": "/Users/redaphid/Projects/paper-cranes/src/audio/AudioProcessor.js",
              "scheme": "file"
            },
            "uuid": "230",
            "collapseByDefault": false,
            "addedWithoutMention": false
          }
        ],
        "terminalFiles": [],
        "selections": [],
        "terminalSelections": [],
        "selectedDocs": [],
        "externalLinks": [],
        "diffHistory": {
          "files": [],
          "diffHistories": [],
          "uniqueId": "94d80190-4461-4ba7-b222-76eabc528b88"
        },
        "mentions": {
          "editTrailContexts": {},
          "notepads": {},
          "quotes": {},
          "selectedCommits": {},
          "selectedPullRequests": {},
          "gitDiff": [],
          "gitDiffFromBranchToMain": [],
          "selectedImages": {},
          "usesCodebase": [],
          "useWeb": [],
          "folderSelections": {},
          "fileSelections": {
            "file:///Users/redaphid/Projects/paper-cranes/src/audio/AudioProcessor.js": [
              {
                "uuid": "230"
              }
            ]
          },
          "terminalFiles": {},
          "selections": {},
          "terminalSelections": {},
          "selectedDocs": {},
          "externalLinks": {},
          "useLinterErrors": [],
          "useDiffReview": [],
          "useContextPicking": [],
          "useRememberThis": [],
          "diffHistory": []
        },
        "usesCodebase": false
      },
      "checkpoint": {
        "files": [
          {
            "uri": {
              "$mid": 1,
              "fsPath": "/Users/redaphid/Projects/paper-cranes/vite.config.js",
              "external": "file:///Users/redaphid/Projects/paper-cranes/vite.config.js",
              "path": "/Users/redaphid/Projects/paper-cranes/vite.config.js",
              "scheme": "file"
            },
            "originalModelDiffWrtV0": [],
            "isNewlyCreated": true
          },
          {
            "uri": {
              "$mid": 1,
              "fsPath": "/Users/redaphid/Projects/paper-cranes/package.json",
              "external": "file:///Users/redaphid/Projects/paper-cranes/package.json",
              "path": "/Users/redaphid/Projects/paper-cranes/package.json",
              "scheme": "file"
            },
            "originalModelDiffWrtV0": [],
            "isNewlyCreated": false
          },
          {
            "uri": {
              "$mid": 1,
              "fsPath": "/Users/redaphid/Projects/paper-cranes/index.html",
              "external": "file:///Users/redaphid/Projects/paper-cranes/index.html",
              "path": "/Users/redaphid/Projects/paper-cranes/index.html",
              "scheme": "file"
            },
            "originalModelDiffWrtV0": [],
            "isNewlyCreated": false
          }
        ],
        "nonExistentFiles": [],
        "newlyCreatedFolders": [],
        "activeInlineDiffs": [],
        "inlineDiffNewlyCreatedResources": {
          "files": [],
          "folders": []
        }
      },
      "capabilityStatuses": {
        "mutate-request": [],
        "start-submit-chat": [],
        "before-submit-chat": [],
        "after-submit-chat": [],
        "after-apply": [],
        "composer-settled": [],
        "composer-done": [],
        "process-stream": []
      }
    },
    {
      "type": 2,
      "bubbleId": "949b5769-bc27-4a72-8825-3cea3c0f6850",
      "suggestedCodeBlocks": [],
      "relevantFiles": [],
      "capabilitiesRan": {
        "mutate-request": [
          11,
          6
        ],
        "start-submit-chat": [],
        "before-submit-chat": [
          15
        ],
        "after-submit-chat": [],
        "after-apply": [],
        "composer-settled": [],
        "composer-done": [
          6
        ],
        "process-codeblock": [],
        "process-stream": [
          15
        ]
      },
      "editTrailContexts": [],
      "multiFileLinterErrors": [],
      "diffHistories": [],
      "recentLocationsHistory": [],
      "isAgentic": false,
      "fileDiffTrajectories": [],
      "existedSubsequentTerminalCommand": false,
      "existedPreviousTerminalCommand": false,
      "docsReferences": [],
      "webReferences": [],
      "attachedFoldersListDirResults": [],
      "codeBlocks": [
        {
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/redaphid/Projects/paper-cranes/vite.config.js",
            "external": "file:///Users/redaphid/Projects/paper-cranes/vite.config.js",
            "path": "/Users/redaphid/Projects/paper-cranes/vite.config.js",
            "scheme": "file"
          },
          "version": 0,
          "codeBlockIdx": 0
        },
        {
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/redaphid/Projects/paper-cranes/package.json",
            "external": "file:///Users/redaphid/Projects/paper-cranes/package.json",
            "path": "/Users/redaphid/Projects/paper-cranes/package.json",
            "scheme": "file"
          },
          "version": 0,
          "codeBlockIdx": 1
        },
        {
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/redaphid/Projects/paper-cranes/index.html",
            "external": "file:///Users/redaphid/Projects/paper-cranes/index.html",
            "path": "/Users/redaphid/Projects/paper-cranes/index.html",
            "scheme": "file"
          },
          "version": 0,
          "codeBlockIdx": 2
        }
      ],
      "text": "Based on your requirements and the code shown, I'd recommend switching to Vite. It's modern, fast, and handles many of these requirements out of the box. Here's how we can modify the build setup:\n\n```javascript:vite.config.js\nimport { defineConfig } from 'vite'\nimport { resolve } from 'path'\nimport { readdirSync, statSync } from 'fs'\nimport { copyFileSync, mkdirSync } from 'fs'\n\n// Helper to get all shader files\nfunction getShaderFiles(dir) {\n  let results = []\n  const files = readdirSync(dir)\n  \n  for (const file of files) {\n    const filePath = resolve(dir, file)\n    const stat = statSync(filePath)\n    \n    if (stat.isDirectory()) {\n      if (!['private', 'knobs', 'utils', 'practice'].includes(file)) {\n        results = results.concat(getShaderFiles(filePath))\n      }\n    } else if (file.endsWith('.frag')) {\n      results.push(filePath)\n    }\n  }\n  return results\n}\n\n// Plugin to handle shader files and generate HTML\nfunction shaderPlugin() {\n  return {\n    name: 'shader-plugin',\n    buildStart() {\n      const shaders = getShaderFiles('shaders')\n      // Generate shaders.html\n      const html = `<!DOCTYPE html>\n        <html>\n          <head><title>Shaders</title></head>\n          <body>\n            <ul>\n              ${shaders.map(shader => {\n                const path = shader.replace(/\\\\/g, '/').replace('shaders/', '').replace('.frag', '')\n                return `<li><a href=\"/?shader=${path}&fullscreen=true\">${path}</a></li>`\n              }).join('\\n')}\n            </ul>\n          </body>\n        </html>`\n      \n      mkdirSync('dist', { recursive: true })\n      // Write shaders.html\n      require('fs').writeFileSync('dist/shaders.html', html)\n    }\n  }\n}\n\nexport default defineConfig({\n  build: {\n    target: 'esnext',\n    minify: 'esbuild',\n    sourcemap: true,\n    rollupOptions: {\n      input: {\n        main: resolve(__dirname, 'index.html'),\n        edit: resolve(__dirname, 'edit.html'),\n        analyze: resolve(__dirname, 'analyze.html')\n      },\n      output: {\n        manualChunks: {\n          // Split vendor code\n          vendor: ['monaco-editor'],\n          // Split web workers\n          workers: [/\\.worker\\.js$/]\n        }\n      }\n    }\n  },\n  worker: {\n    format: 'es',\n    plugins: []\n  },\n  plugins: [\n    shaderPlugin(),\n    {\n      name: 'static-copy',\n      buildEnd() {\n        // Copy static assets\n        const staticFiles = [\n          'index.css',\n          'edit.css',\n          'BarGraph.css',\n          'favicon.ico',\n          'codicon.ttf',\n          'analyze.css'\n        ]\n        \n        staticFiles.forEach(file => {\n          copyFileSync(file, `dist/${file}`)\n        })\n        \n        // Copy directories\n        const dirs = ['images', 'shaders']\n        dirs.forEach(dir => {\n          require('fs-extra').copySync(dir, `dist/${dir}`)\n        })\n        \n        // Copy Monaco editor files\n        require('fs-extra').copySync(\n          'node_modules/monaco-editor/min/vs',\n          'dist/vs'\n        )\n      }\n    }\n  ],\n  server: {\n    port: 6969\n  },\n  optimizeDeps: {\n    include: ['monaco-editor']\n  }\n})\n```\n\nKey benefits of this setup:\n\n1. **Better code splitting**: Vite automatically handles code splitting and creates optimal chunks\n\n2. **Web Worker Support**: Vite has built-in support for Web Workers and will properly bundle them\n\n3. **Better Tree Shaking**: Vite uses Rollup under the hood which has excellent tree shaking\n\n4. **Automatic HMR**: Better hot module replacement than esbuild\n\n5. **Better Asset Handling**: Built-in support for various asset types\n\nTo use this, you'll need to update your package.json:\n\n```json:package.json\n{\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    // ... existing deps\n  },\n  \"devDependencies\": {\n    \"vite\": \"^4.5.0\",\n    \"fs-extra\": \"^11.1.1\"\n  }\n}\n```\n\nYou'll also need to slightly modify your HTML files to use Vite's module system. For example:\n\n```html:index.html\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"/index.css\">\n  <!-- Other head elements -->\n</head>\n<body>\n  <!-- Your content -->\n  <script type=\"module\" src=\"/index.js\"></script>\n</body>\n</html>\n```\n\nThis setup will:\n- Properly handle your Web Workers\n- Bundle and minify your code efficiently\n- Copy all necessary static assets\n- Generate the shader list HTML\n- Provide better development experience with HMR\n- Create optimized production builds with proper code splitting\n- Handle all your asset types (shaders, images, fonts, etc.)\n\nThe main advantages over your current esbuild setup are:\n1. Better code splitting and tree shaking\n2. Built-in HMR and dev server\n3. Better handling of Web Workers\n4. More optimized production builds\n5. Better ecosystem and plugin support",
      "timingInfo": {
        "clientStartTime": 1737327140056,
        "clientRpcSendTime": 1737327140098,
        "clientSettleTime": 1737327164015,
        "clientEndTime": 1737327164015
      },
      "intermediateChunks": [],
      "symbolLinks": [
        {
          "symbolName": "dist/${file}",
          "symbolSearchString": "dist/",
          "relativeWorkspacePath": "esbuild.js",
          "roughLineNumber": 106
        },
        {
          "symbolName": "dist/${dir}",
          "symbolSearchString": "dist/",
          "relativeWorkspacePath": "esbuild.js",
          "roughLineNumber": 106
        }
      ],
      "capabilityStatuses": {
        "mutate-request": [],
        "start-submit-chat": [],
        "before-submit-chat": [],
        "after-submit-chat": [],
        "after-apply": [],
        "composer-settled": [],
        "composer-done": [],
        "process-stream": [
          {
            "type": 15,
            "status": "completed"
          }
        ]
      }
    }
  ],
  "status": "completed",
  "context": {
    "editTrailContexts": [],
    "notepads": [],
    "quotes": [],
    "selectedCommits": [],
    "selectedPullRequests": [],
    "selectedImages": [],
    "folderSelections": [],
    "fileSelections": [
      {
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/paper-cranes/esbuild.js",
          "external": "file:///Users/redaphid/Projects/paper-cranes/esbuild.js",
          "path": "/Users/redaphid/Projects/paper-cranes/esbuild.js",
          "scheme": "file"
        },
        "addedWithoutMention": true,
        "autoContext": true
      }
    ],
    "selections": [],
    "terminalSelections": [],
    "selectedDocs": [],
    "externalLinks": [],
    "diffHistory": {
      "files": [],
      "diffHistories": [],
      "uniqueId": "94d80190-4461-4ba7-b222-76eabc528b88"
    },
    "mentions": {
      "editTrailContexts": {},
      "notepads": {},
      "quotes": {},
      "selectedCommits": {},
      "selectedPullRequests": {},
      "gitDiff": [],
      "gitDiffFromBranchToMain": [],
      "selectedImages": {},
      "usesCodebase": [],
      "useWeb": [],
      "folderSelections": {},
      "fileSelections": {
        "file:///Users/redaphid/Projects/paper-cranes/src/audio/AudioProcessor.js": []
      },
      "terminalFiles": {},
      "selections": {},
      "terminalSelections": {},
      "selectedDocs": {},
      "externalLinks": {},
      "useLinterErrors": [],
      "useDiffReview": [],
      "useContextPicking": [],
      "useRememberThis": [],
      "diffHistory": []
    }
  },
  "gitGraphFileSuggestions": [],
  "userResponsesToSuggestedCodeBlocks": [
    {
      "userResponseType": 1,
      "filePath": "vite.config.js"
    },
    {
      "userResponseType": 1,
      "filePath": "package.json"
    },
    {
      "userResponseType": 1,
      "filePath": "index.html"
    }
  ],
  "generatingBubbleIds": [],
  "isReadingLongFile": false,
  "codeBlockData": {
    "file:///Users/redaphid/Projects/paper-cranes/vite.config.js": [
      {
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/paper-cranes/vite.config.js",
          "external": "file:///Users/redaphid/Projects/paper-cranes/vite.config.js",
          "path": "/Users/redaphid/Projects/paper-cranes/vite.config.js",
          "scheme": "file"
        },
        "version": 0,
        "content": "import { defineConfig } from 'vite'\nimport { resolve } from 'path'\nimport { readdirSync, statSync } from 'fs'\nimport { copyFileSync, mkdirSync } from 'fs'\n\n// Helper to get all shader files\nfunction getShaderFiles(dir) {\n  let results = []\n  const files = readdirSync(dir)\n  \n  for (const file of files) {\n    const filePath = resolve(dir, file)\n    const stat = statSync(filePath)\n    \n    if (stat.isDirectory()) {\n      if (!['private', 'knobs', 'utils', 'practice'].includes(file)) {\n        results = results.concat(getShaderFiles(filePath))\n      }\n    } else if (file.endsWith('.frag')) {\n      results.push(filePath)\n    }\n  }\n  return results\n}\n\n// Plugin to handle shader files and generate HTML\nfunction shaderPlugin() {\n  return {\n    name: 'shader-plugin',\n    buildStart() {\n      const shaders = getShaderFiles('shaders')\n      // Generate shaders.html\n      const html = `<!DOCTYPE html>\n        <html>\n          <head><title>Shaders</title></head>\n          <body>\n            <ul>\n              ${shaders.map(shader => {\n                const path = shader.replace(/\\\\/g, '/').replace('shaders/', '').replace('.frag', '')\n                return `<li><a href=\"/?shader=${path}&fullscreen=true\">${path}</a></li>`\n              }).join('\\n')}\n            </ul>\n          </body>\n        </html>`\n      \n      mkdirSync('dist', { recursive: true })\n      // Write shaders.html\n      require('fs').writeFileSync('dist/shaders.html', html)\n    }\n  }\n}\n\nexport default defineConfig({\n  build: {\n    target: 'esnext',\n    minify: 'esbuild',\n    sourcemap: true,\n    rollupOptions: {\n      input: {\n        main: resolve(__dirname, 'index.html'),\n        edit: resolve(__dirname, 'edit.html'),\n        analyze: resolve(__dirname, 'analyze.html')\n      },\n      output: {\n        manualChunks: {\n          // Split vendor code\n          vendor: ['monaco-editor'],\n          // Split web workers\n          workers: [/\\.worker\\.js$/]\n        }\n      }\n    }\n  },\n  worker: {\n    format: 'es',\n    plugins: []\n  },\n  plugins: [\n    shaderPlugin(),\n    {\n      name: 'static-copy',\n      buildEnd() {\n        // Copy static assets\n        const staticFiles = [\n          'index.css',\n          'edit.css',\n          'BarGraph.css',\n          'favicon.ico',\n          'codicon.ttf',\n          'analyze.css'\n        ]\n        \n        staticFiles.forEach(file => {\n          copyFileSync(file, `dist/${file}`)\n        })\n        \n        // Copy directories\n        const dirs = ['images', 'shaders']\n        dirs.forEach(dir => {\n          require('fs-extra').copySync(dir, `dist/${dir}`)\n        })\n        \n        // Copy Monaco editor files\n        require('fs-extra').copySync(\n          'node_modules/monaco-editor/min/vs',\n          'dist/vs'\n        )\n      }\n    }\n  ],\n  server: {\n    port: 6969\n  },\n  optimizeDeps: {\n    include: ['monaco-editor']\n  }\n})",
        "languageId": "javascript",
        "status": "accepted",
        "isNotApplied": false,
        "originalModelDiffWrtV0": [],
        "newModelDiffWrtV0": [
          {
            "original": {
              "startLineNumber": 1,
              "endLineNumberExclusive": 2
            },
            "modified": [
              "import { defineConfig } from 'vite'",
              "import { resolve } from 'path'",
              "import { readdirSync, statSync } from 'fs'",
              "import { copyFileSync, mkdirSync } from 'fs'",
              "",
              "// Helper to get all shader files",
              "function getShaderFiles(dir) {",
              "  let results = []",
              "  const files = readdirSync(dir)",
              "  ",
              "  for (const file of files) {",
              "    const filePath = resolve(dir, file)",
              "    const stat = statSync(filePath)",
              "    ",
              "    if (stat.isDirectory()) {",
              "      if (!['private', 'knobs', 'utils', 'practice'].includes(file)) {",
              "        results = results.concat(getShaderFiles(filePath))",
              "      }",
              "    } else if (file.endsWith('.frag')) {",
              "      results.push(filePath)",
              "    }",
              "  }",
              "  return results",
              "}",
              "",
              "// Plugin to handle shader files and generate HTML",
              "function shaderPlugin() {",
              "  return {",
              "    name: 'shader-plugin',",
              "    buildStart() {",
              "      const shaders = getShaderFiles('shaders')",
              "      // Generate shaders.html",
              "      const html = `<!DOCTYPE html>",
              "        <html>",
              "          <head><title>Shaders</title></head>",
              "          <body>",
              "            <ul>",
              "              ${shaders.map(shader => {",
              "                const path = shader.replace(/\\\\/g, '/').replace('shaders/', '').replace('.frag', '')",
              "                return `<li><a href=\"/?shader=${path}&fullscreen=true\">${path}</a></li>`",
              "              }).join('\\n')}",
              "            </ul>",
              "          </body>",
              "        </html>`",
              "      ",
              "      mkdirSync('dist', { recursive: true })",
              "      // Write shaders.html",
              "      require('fs').writeFileSync('dist/shaders.html', html)",
              "    }",
              "  }",
              "}",
              "",
              "export default defineConfig({",
              "  build: {",
              "    target: 'esnext',",
              "    minify: 'esbuild',",
              "    sourcemap: true,",
              "    rollupOptions: {",
              "      input: {",
              "        main: resolve(__dirname, 'index.html'),",
              "        edit: resolve(__dirname, 'edit.html'),",
              "        analyze: resolve(__dirname, 'analyze.html')",
              "      },",
              "      output: {",
              "        manualChunks: {",
              "          // Split vendor code",
              "          vendor: ['monaco-editor'],",
              "          // Split web workers",
              "          workers: [/\\.worker\\.js$/]",
              "        }",
              "      }",
              "    }",
              "  },",
              "  worker: {",
              "    format: 'es',",
              "    plugins: []",
              "  },",
              "  plugins: [",
              "    shaderPlugin(),",
              "    {",
              "      name: 'static-copy',",
              "      buildEnd() {",
              "        // Copy static assets",
              "        const staticFiles = [",
              "          'index.css',",
              "          'edit.css',",
              "          'BarGraph.css',",
              "          'favicon.ico',",
              "          'codicon.ttf',",
              "          'analyze.css'",
              "        ]",
              "        ",
              "        staticFiles.forEach(file => {",
              "          copyFileSync(file, `dist/${file}`)",
              "        })",
              "        ",
              "        // Copy directories",
              "        const dirs = ['images', 'shaders']",
              "        dirs.forEach(dir => {",
              "          require('fs-extra').copySync(dir, `dist/${dir}`)",
              "        })",
              "        ",
              "        // Copy Monaco editor files",
              "        require('fs-extra').copySync(",
              "          'node_modules/monaco-editor/min/vs',",
              "          'dist/vs'",
              "        )",
              "      }",
              "    }",
              "  ],",
              "  server: {",
              "    port: 6969",
              "  },",
              "  optimizeDeps: {",
              "    include: ['monaco-editor']",
              "  }",
              "}) "
            ]
          }
        ],
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/paper-cranes/package.json": [
      {
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/paper-cranes/package.json",
          "external": "file:///Users/redaphid/Projects/paper-cranes/package.json",
          "path": "/Users/redaphid/Projects/paper-cranes/package.json",
          "scheme": "file"
        },
        "version": 0,
        "content": "{\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    // ... existing deps\n  },\n  \"devDependencies\": {\n    \"vite\": \"^4.5.0\",\n    \"fs-extra\": \"^11.1.1\"\n  }\n}",
        "languageId": "json",
        "status": "accepted",
        "isNotApplied": false,
        "originalModelDiffWrtV0": [],
        "newModelDiffWrtV0": [
          {
            "original": {
              "startLineNumber": 10,
              "endLineNumberExclusive": 13
            },
            "modified": [
              "    \"build\": \"vite build\",",
              "    \"dev\": \"vite\",",
              "    \"format\": \"eslint --fix .\",",
              "    \"preview\": \"vite preview\""
            ]
          },
          {
            "original": {
              "startLineNumber": 39,
              "endLineNumberExclusive": 40
            },
            "modified": [
              "    \"prettier\": \"^3.4.2\",",
              "    \"vite\": \"^4.5.0\",",
              "    \"fs-extra\": \"^11.1.1\""
            ]
          }
        ],
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/paper-cranes/index.html": [
      {
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/paper-cranes/index.html",
          "external": "file:///Users/redaphid/Projects/paper-cranes/index.html",
          "path": "/Users/redaphid/Projects/paper-cranes/index.html",
          "scheme": "file"
        },
        "version": 0,
        "content": "<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"/index.css\">\n  <!-- Other head elements -->\n</head>\n<body>\n  <!-- Your content -->\n  <script type=\"module\" src=\"/index.js\"></script>\n</body>\n</html>",
        "languageId": "html",
        "status": "accepted",
        "isNotApplied": false,
        "originalModelDiffWrtV0": [],
        "newModelDiffWrtV0": [
          {
            "original": {
              "startLineNumber": 5,
              "endLineNumberExclusive": 6
            },
            "modified": [
              "    <link rel=\"stylesheet\" href=\"/index.css\" />"
            ]
          },
          {
            "original": {
              "startLineNumber": 14,
              "endLineNumberExclusive": 15
            },
            "modified": [
              "    <script type=\"module\" src=\"/index.js\"></script>"
            ]
          }
        ],
        "isNoOp": false
      }
    ]
  },
  "originalModelLines": {
    "file:///Users/redaphid/Projects/paper-cranes/vite.config.js": [
      " "
    ],
    "file:///Users/redaphid/Projects/paper-cranes/package.json": [
      "{",
      "  \"name\": \"paper-cranes-audio\",",
      "  \"version\": \"1.0.2\",",
      "  \"description\": \"\",",
      "  \"type\": \"module\",",
      "  \"main\": \"dist/src/audio/AudioProcessor.js\",",
      "  \"scripts\": {",
      "    \"start\": \"npm run dev\",",
      "    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",",
      "    \"build\": \"node ./esbuild.js\",",
      "    \"dev\": \"node ./esbuild.js\",",
      "    \"format\": \"eslint --fix .\"",
      "  },",
      "  \"author\": \"hypnodroid\",",
      "  \"license\": \"UNLICENSED\",",
      "  \"dependencies\": {",
      "    \"@preact/signals\": \"^1.3.1\",",
      "    \"debounce\": \"^2.2.0\",",
      "    \"htm\": \"^3.1.1\",",
      "    \"html\": \"^1.0.0\",",
      "    \"hypnosound\": \"^1.8.0\",",
      "    \"monaco-editor\": \"^0.52.2\",",
      "    \"preact\": \"^10.25.4\",",
      "    \"twgl-base.js\": \"^5.5.3\"",
      "  },",
      "  \"devDependencies\": {",
      "    \"@types/vscode\": \"^1.96.0\",",
      "    \"browser-sync\": \"^3.0.0\",",
      "    \"chokidar\": \"^3.5.3\",",
      "    \"concurrently\": \"^9.1.2\",",
      "    \"cross-env\": \"^7.0.3\",",
      "    \"esbuild\": \"^0.20.2\",",
      "    \"esbuild-plugin-copy\": \"^2.1.1\",",
      "    \"esbuild-plugin-css-modules\": \"^0.3.0\",",
      "    \"esbuild-plugin-html\": \"^1.0.0\",",
      "    \"eslint\": \"^8.57.1\",",
      "    \"mini-css-extract-plugin\": \"^2.9.2\",",
      "    \"ncp\": \"^2.0.0\",",
      "    \"prettier\": \"^3.4.2\"",
      "  },",
      "  \"languages\": [",
      "    {",
      "      \"id\": \"paper-cranes-fragment-shader\",",
      "      \"aliases\": [",
      "        \"GLSL\",",
      "        \"glsl\"",
      "      ],",
      "      \"extensions\": [",
      "        \".frag\",",
      "        \".vert\",",
      "        \".glsl\"",
      "      ]",
      "    }",
      "  ]",
      "}",
      ""
    ],
    "file:///Users/redaphid/Projects/paper-cranes/index.html": [
      "<!doctype html>",
      "<html lang=\"en\">",
      "",
      "<head>",
      "    <link rel=\"stylesheet\" href=\"index.css\" />",
      "    <title>Paper Cranes</title>",
      "    <!-- Google tag (gtag.js) -->",
      "    <script async src=\"https://www.googletagmanager.com/gtag/js?id=G-4BWWJ5ZPHY\"></script>",
      "",
      "</head>",
      "",
      "<body class=\"ready\">",
      "    <canvas id=\"visualizer\" width=\"2160\" height=\"1920\"></canvas>",
      "    <script type=\"module\" src=\"./index.js\"></script>",
      "</body>",
      "",
      "</html>",
      ""
    ]
  },
  "newlyCreatedFiles": [],
  "newlyCreatedFolders": [],
  "tabs": [
    {
      "type": "composer"
    },
    {
      "type": "code",
      "uri": {
        "$mid": 1,
        "fsPath": "/Users/redaphid/Projects/paper-cranes/index.html",
        "external": "file:///Users/redaphid/Projects/paper-cranes/index.html",
        "path": "/Users/redaphid/Projects/paper-cranes/index.html",
        "scheme": "file"
      },
      "version": 0
    },
    {
      "type": "code",
      "uri": {
        "$mid": 1,
        "fsPath": "/Users/redaphid/Projects/paper-cranes/package.json",
        "external": "file:///Users/redaphid/Projects/paper-cranes/package.json",
        "path": "/Users/redaphid/Projects/paper-cranes/package.json",
        "scheme": "file"
      },
      "version": 0
    },
    {
      "type": "code",
      "uri": {
        "$mid": 1,
        "fsPath": "/Users/redaphid/Projects/paper-cranes/vite.config.js",
        "external": "file:///Users/redaphid/Projects/paper-cranes/vite.config.js",
        "path": "/Users/redaphid/Projects/paper-cranes/vite.config.js",
        "scheme": "file"
      },
      "version": 0
    }
  ],
  "selectedTabIndex": 1,
  "lastUpdatedAt": 1737327140098,
  "createdAt": 1737327035623,
  "hasChangedContext": true,
  "capabilities": [
    {
      "type": 9,
      "data": {
        "customInstructions": ""
      }
    },
    {
      "type": 11,
      "data": {
        "customInstructions": ""
      }
    },
    {
      "type": 15,
      "data": {
        "customInstructions": "",
        "bubbleDataMap": "{}"
      }
    },
    {
      "type": 14,
      "data": {
        "customInstructions": ""
      }
    },
    {
      "type": 6,
      "data": {
        "customInstructions": ""
      }
    }
  ],
  "name": "Modern JavaScript Bundler for Web Workers",
  "forceMode": "edit",
  "codebaseSearchSettings": {},
  "isFileListExpanded": true,
  "isAgentic": false
}