{
  "_v": 3,
  "composerId": "aa0b15fb-23ac-413e-b29f-3ca5982cccb5",
  "richText": "{\"root\":{\"children\":[{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
  "hasLoaded": true,
  "text": "",
  "fullConversationHeadersOnly": [
    {
      "bubbleId": "92738a17-89ef-4453-833e-892037ece569",
      "type": 1
    },
    {
      "bubbleId": "fd811716-e89b-41e8-bc5f-701c21670dcc",
      "type": 2,
      "serverBubbleId": "2556d9f8-40d8-4fad-8554-7ce0090aef21"
    },
    {
      "bubbleId": "a48fe6af-065f-4bac-8d39-e2859dfb97d9",
      "type": 2
    },
    {
      "bubbleId": "e8e17d8e-ba11-4646-9df7-7cfbca6f9de1",
      "type": 2
    },
    {
      "bubbleId": "70e772b8-eb53-42cc-8250-36d130bd86c0",
      "type": 2,
      "serverBubbleId": "2565ca12-7a6a-4fae-806e-9f114df6c687"
    },
    {
      "bubbleId": "e60bf4c6-68a7-40d6-b288-6c20136c42ed",
      "type": 1
    },
    {
      "bubbleId": "4c4d7275-e5f4-407e-ac91-2fad6c7d151e",
      "type": 2,
      "serverBubbleId": "b921d1ee-494c-4f63-9b0e-e14836276c16"
    },
    {
      "bubbleId": "3d143627-6303-4d65-a655-16a0a5fad058",
      "type": 2
    },
    {
      "bubbleId": "495843a3-2658-4c5b-b8e6-5092abcd9d72",
      "type": 2
    },
    {
      "bubbleId": "3ab03574-1865-486c-bf68-7632c0ce0e93",
      "type": 2,
      "serverBubbleId": "0c44c9f4-1282-4f33-b63b-1205d5c330c3"
    },
    {
      "bubbleId": "f43bb0a6-310a-44c3-b5e0-0abb83c5e73c",
      "type": 1
    },
    {
      "bubbleId": "b20869b3-b7e1-4162-9a2e-240a013c9278",
      "type": 2,
      "serverBubbleId": "aed810a4-50cf-492c-a3cc-3fa94aba34b0"
    },
    {
      "bubbleId": "1d3a2931-bc4b-4593-80f2-97a07385a74d",
      "type": 2
    },
    {
      "bubbleId": "c0197222-be3d-4550-a8f6-aceecc9b3d80",
      "type": 2
    },
    {
      "bubbleId": "5f123e11-83ef-41c6-9455-e0776ba6080a",
      "type": 2,
      "serverBubbleId": "eee63553-7e93-447e-9336-73e38796e6e3"
    },
    {
      "bubbleId": "56aff895-02d7-4756-b527-879acf3996c1",
      "type": 2
    },
    {
      "bubbleId": "a3978b84-411a-4de4-a13e-5b2635d8f405",
      "type": 2,
      "serverBubbleId": "c39a3130-34da-45a2-8c79-1e1820c6ad16"
    },
    {
      "bubbleId": "c328a91d-3bf3-4e23-b4fe-e8030e38ea7f",
      "type": 1
    },
    {
      "bubbleId": "5337f7a9-f17d-4c52-af7b-52596eee7c3d",
      "type": 2,
      "serverBubbleId": "6feb0e87-d735-43d4-bc43-ee009ac68c60"
    },
    {
      "bubbleId": "d5de1c1c-1985-4219-b82a-6763fbcac52b",
      "type": 2
    },
    {
      "bubbleId": "bc62bed6-fcb6-4fd3-9238-8e01ac10f912",
      "type": 2
    },
    {
      "bubbleId": "6508bf96-f959-49c0-ab44-7d762cc90d27",
      "type": 2,
      "serverBubbleId": "50f1c7f2-a1dc-44f3-ac69-a18572b92ffc"
    },
    {
      "bubbleId": "30975f91-a23e-4e93-9f54-ac239465dc3e",
      "type": 1
    },
    {
      "bubbleId": "58293cc7-b791-45a0-b83e-feb1c1468f52",
      "type": 2,
      "serverBubbleId": "90aecd75-1262-4835-8926-0c2701a1a857"
    },
    {
      "bubbleId": "58c94fd8-0516-431b-b108-293746cb87ed",
      "type": 2
    },
    {
      "bubbleId": "89fef4db-943c-4a5c-bd68-472c0dea5f69",
      "type": 2
    },
    {
      "bubbleId": "467e3d04-27ce-4c90-9f22-912904ef99f4",
      "type": 2,
      "serverBubbleId": "07410ca5-b242-4aab-89f2-e5f1fdf95988"
    },
    {
      "bubbleId": "d1e84437-1f46-47b3-9ecf-d759b5421d78",
      "type": 2
    },
    {
      "bubbleId": "82ee9414-7496-45ab-b5b2-52564d8f34cc",
      "type": 2,
      "serverBubbleId": "b52f40a4-1807-494f-8585-a02255e32ba6"
    }
  ],
  "conversationMap": {},
  "status": "completed",
  "context": {
    "notepads": [],
    "composers": [],
    "quotes": [],
    "selectedCommits": [],
    "selectedPullRequests": [],
    "selectedImages": [],
    "folderSelections": [],
    "fileSelections": [
      {
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "external": "file:///Users/redaphid/Projects/paper-cranes/edit.js",
          "path": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "scheme": "file"
        },
        "addedWithoutMention": true,
        "autoContext": true
      }
    ],
    "selections": [],
    "terminalSelections": [],
    "selectedDocs": [],
    "externalLinks": [],
    "cursorRules": [],
    "mentions": {
      "notepads": {},
      "composers": {},
      "quotes": {},
      "selectedCommits": {},
      "selectedPullRequests": {},
      "gitDiff": [],
      "gitDiffFromBranchToMain": [],
      "selectedImages": {},
      "usesCodebase": [],
      "useWeb": [],
      "folderSelections": {},
      "fileSelections": {
        "file:///Users/redaphid/Projects/paper-cranes/edit.html": []
      },
      "terminalFiles": {},
      "selections": {},
      "terminalSelections": {},
      "selectedDocs": {},
      "externalLinks": {},
      "useLinterErrors": [],
      "useDiffReview": [],
      "useContextPicking": [],
      "useRememberThis": [],
      "diffHistory": [],
      "cursorRules": {}
    }
  },
  "gitGraphFileSuggestions": [],
  "generatingBubbleIds": [],
  "isReadingLongFile": false,
  "codeBlockData": {
    "file:///Users/redaphid/Projects/paper-cranes/edit.js": [
      {
        "_v": 2,
        "bubbleId": "e8e17d8e-ba11-4646-9df7-7cfbca6f9de1",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "external": "file:///Users/redaphid/Projects/paper-cranes/edit.js",
          "path": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "scheme": "file"
        },
        "version": 0,
        "status": "completed",
        "languageId": "javascript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "7dc32292-d838-4858-b6b1-e440f503207f",
        "intermediateModelLines": [],
        "lastDiffId": "f8a2a235-a00f-46dd-ac8d-ef6f3a79e3d7",
        "diffId": "34722a7c-8f17-48bb-be77-39f6e4835ff3",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "495843a3-2658-4c5b-b8e6-5092abcd9d72",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "external": "file:///Users/redaphid/Projects/paper-cranes/edit.js",
          "path": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "scheme": "file"
        },
        "version": 1,
        "status": "completed",
        "languageId": "javascript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "210a4d4a-05d6-4266-ad4f-fb21164d001f",
        "intermediateModelLines": [],
        "lastDiffId": "c6a53be8-aadb-45ef-86bc-22a65333b569",
        "diffId": "b833f593-49ae-41c3-92e3-42777fb236ea",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "c0197222-be3d-4550-a8f6-aceecc9b3d80",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "external": "file:///Users/redaphid/Projects/paper-cranes/edit.js",
          "path": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "scheme": "file"
        },
        "version": 2,
        "status": "accepted",
        "languageId": "javascript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "559894f6-a8c9-474f-aa2e-2a7b4231200f",
        "intermediateModelLines": [],
        "lastDiffId": "ae097c79-fe7c-4b83-8a3c-61e556491947",
        "diffId": "19289c1a-150d-40d4-9964-03ff21eae79c",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "56aff895-02d7-4756-b527-879acf3996c1",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "external": "file:///Users/redaphid/Projects/paper-cranes/edit.js",
          "path": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "scheme": "file"
        },
        "version": 3,
        "status": "accepted",
        "languageId": "javascript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "8064d05e-be87-4102-9769-9058b6504de6",
        "intermediateModelLines": [],
        "lastDiffId": "386c895b-a227-4fe4-8e8c-04d90b28a140",
        "diffId": "1515bc34-ab81-429a-a538-ed15f7c99931",
        "chainedInfo": {
          "chainedFromVersion": 2
        },
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "d1e84437-1f46-47b3-9ecf-d759b5421d78",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "external": "file:///Users/redaphid/Projects/paper-cranes/edit.js",
          "path": "/Users/redaphid/Projects/paper-cranes/edit.js",
          "scheme": "file"
        },
        "version": 4,
        "status": "accepted",
        "languageId": "javascript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "102ac8ac-51e3-47df-8f30-e7ef387eedf1",
        "intermediateModelLines": [],
        "lastDiffId": "0cb5a4e9-8482-4d1a-85e8-a21466aaf752",
        "diffId": "0f5e840a-6082-4fb8-a5c6-0ae6b98ca40a",
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/paper-cranes/edit.html": [
      {
        "_v": 2,
        "bubbleId": "89fef4db-943c-4a5c-bd68-472c0dea5f69",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/paper-cranes/edit.html",
          "external": "file:///Users/redaphid/Projects/paper-cranes/edit.html",
          "path": "/Users/redaphid/Projects/paper-cranes/edit.html",
          "scheme": "file"
        },
        "version": 0,
        "status": "accepted",
        "languageId": "html",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "1a8a7b7d-4d85-4009-96bb-f34ee244bfa6",
        "intermediateModelLines": [],
        "lastDiffId": "2fec77a7-353c-4afc-9bff-89beb698047d",
        "diffId": "40b0284c-6291-4a46-8682-daf1531df52e",
        "isNoOp": false
      }
    ]
  },
  "originalModelLines": {
    "file:///Users/redaphid/Projects/paper-cranes/edit.js": [
      "import { render, Fragment } from 'preact'",
      "import { useState, useEffect, useRef } from 'preact/hooks'",
      "import { html } from 'htm/preact'",
      "import debounce from 'debounce'",
      "import { getRelativeOrAbsoluteShaderUrl } from './src/utils.js'",
      "",
      "const updateUrl = (params) => {",
      "    const currentUrl = new URL(window.location)",
      "    Object.entries(params).forEach(([paramName, paramValue]) => {",
      "        if (paramValue !== null && paramValue !== undefined) {",
      "            currentUrl.searchParams.set(paramName, paramValue)",
      "        } else {",
      "            currentUrl.searchParams.delete(paramName)",
      "        }",
      "    })",
      "    window.history.replaceState({}, '', currentUrl.toString())",
      "}",
      "",
      "const updateUrlDebounced = debounce(updateUrl, 50)",
      "",
      "const FeatureEditor = ({ name, feature, onChange, onDelete }) => {",
      "    const handleValueChange = (e) => onChange(name, { ...feature, value: parseFloat(e.target.value) })",
      "",
      "    const handleMinChange = (e) => {",
      "        // Allow the field to be empty temporarily",
      "        const val = e.target.value",
      "        if (val === '') {",
      "            onChange(name, { ...feature, min: '' })",
      "        } else if (!isNaN(parseFloat(val))) {",
      "            const numericValue = parseFloat(val)",
      "            // Round to 4 decimal places to avoid floating point errors",
      "            const roundedValue = Math.round(numericValue * 10000) / 10000",
      "            onChange(name, { ...feature, min: roundedValue })",
      "        }",
      "    }",
      "",
      "    const handleMaxChange = (e) => {",
      "        // Allow the field to be empty temporarily",
      "        const val = e.target.value",
      "        if (val === '') {",
      "            onChange(name, { ...feature, max: '' })",
      "        } else if (!isNaN(parseFloat(val))) {",
      "            const numericValue = parseFloat(val)",
      "            // Round to 4 decimal places to avoid floating point errors",
      "            const roundedValue = Math.round(numericValue * 10000) / 10000",
      "            onChange(name, { ...feature, max: roundedValue })",
      "        }",
      "    }",
      "",
      "    const handleKeyDown = (e, type) => {",
      "        if (e.key !== 'ArrowUp' && e.key !== 'ArrowDown') return;",
      "",
      "        e.preventDefault()",
      "",
      "        // Get min and max values",
      "        const min = feature.min === '' || isNaN(parseFloat(feature.min)) ? 0 : parseFloat(feature.min)",
      "        const max = feature.max === '' || isNaN(parseFloat(feature.max)) ? 1 : parseFloat(feature.max)",
      "",
      "        // Calculate range and step size based on percentage",
      "        const range = max - min",
      "        const step = e.shiftKey ? range * 0.01 : range * 0.1",
      "",
      "        // Get current value",
      "        const fieldName = type === 'min' ? 'min' : 'max'",
      "        const currentVal = feature[fieldName]",
      "        const numVal = currentVal === '' || isNaN(parseFloat(currentVal)) ? 0 : parseFloat(currentVal)",
      "",
      "        // Calculate new value based on key pressed and round to 4 decimal places",
      "        const newVal = Math.round((e.key === 'ArrowUp' ? numVal + step : numVal - step) * 10000) / 10000",
      "",
      "        // Update the value",
      "        const updatedFeature = { ...feature }",
      "        updatedFeature[fieldName] = newVal",
      "        onChange(name, updatedFeature)",
      "    }",
      "",
      "    const handleSliderKeyDown = (e) => {",
      "        if (e.key !== 'ArrowUp' && e.key !== 'ArrowDown') return;",
      "",
      "        e.preventDefault()",
      "",
      "        // Get current min and max",
      "        const min = feature.min === '' ? 0 : parseFloat(feature.min)",
      "        const max = feature.max === '' ? 1 : parseFloat(feature.max)",
      "",
      "        // Calculate step size as percentage of the range",
      "        const range = max - min",
      "        const step = e.shiftKey ? range * 0.01 : range * 0.1",
      "",
      "        // Get current value",
      "        const currentVal = parseFloat(feature.value)",
      "",
      "        // Calculate new value based on key pressed and round to 4 decimal places",
      "        // Make sure arrow up increases and arrow down decreases the value",
      "        const direction = e.key === 'ArrowUp' ? 1 : -1",
      "        const newVal = Math.round((currentVal + direction * step) * 10000) / 10000",
      "",
      "        // Create updated feature object",
      "        const updatedFeature = { ...feature }",
      "",
      "        // If the new value exceeds max, expand the max boundary",
      "        if (newVal > max) {",
      "            updatedFeature.max = Math.round(newVal * 10000) / 10000",
      "            updatedFeature.value = updatedFeature.max",
      "        }",
      "        // If the new value is below min, expand the min boundary",
      "        else if (newVal < min) {",
      "            updatedFeature.min = Math.round(newVal * 10000) / 10000",
      "            updatedFeature.value = updatedFeature.min",
      "        }",
      "        // Otherwise just update the value within boundaries",
      "        else {",
      "            updatedFeature.value = newVal",
      "        }",
      "",
      "        onChange(name, updatedFeature)",
      "        handleCommitValue()",
      "    }",
      "",
      "    // Format displayed value to avoid floating point issues",
      "    const formatNumber = (num) => {",
      "        if (num === '' || isNaN(num)) return ''",
      "        // For small numbers or integers, show as is",
      "        if (Number.isInteger(num) || Math.abs(num) < 0.0001) return num",
      "        // Otherwise limit to 4 decimal places",
      "        return parseFloat(num.toFixed(4))",
      "    }",
      "",
      "    const handleCommitValue = () => {",
      "        updateUrlDebounced({ [name]: feature.value })",
      "    }",
      "",
      "    useEffect(() => {",
      "        if (feature.min !== '' && feature.max !== '' && !isNaN(feature.min) && !isNaN(feature.max)) {",
      "            updateUrlDebounced({",
      "                [name]: feature.value,",
      "                [`${name}.min`]: feature.min,",
      "                [`${name}.max`]: feature.max,",
      "            })",
      "            window.cranes.manualFeatures[name] = feature.value",
      "        }",
      "    }, [feature])",
      "",
      "    return html`",
      "        <div className=\"edit-feature\" key=${name}>",
      "            <div class=\"feature-header\">",
      "                <div class=\"feature-name\">",
      "                    <span>${name}</span>",
      "                    <span class=\"value-display\">${feature.value.toFixed(2)}</span>",
      "                    <button onClick=${() => onDelete(name)} class=\"delete-button\" title=\"Delete feature\"></button>",
      "                </div>",
      "                <div class=\"slider-container\">",
      "                    <input",
      "                        type=\"number\"",
      "                        value=${formatNumber(feature.min)}",
      "                        onInput=${handleMinChange}",
      "                        onKeyDown=${(e) => handleKeyDown(e, 'min')}",
      "                        placeholder=\"0\"",
      "                        class=\"min-input\"",
      "                        step=\"0.1\"",
      "                    />",
      "                    <input",
      "                        class=\"feature-value\"",
      "                        type=\"range\"",
      "                        min=${feature.min === '' ? 0 : feature.min}",
      "                        max=${feature.max === '' ? 1 : feature.max}",
      "                        step=\"0.01\"",
      "                        value=${feature.value}",
      "                        onInput=${handleValueChange}",
      "                        onChange=${handleCommitValue}",
      "                        onKeyDown=${handleSliderKeyDown}",
      "                    />",
      "                    <input",
      "                        type=\"number\"",
      "                        value=${formatNumber(feature.max)}",
      "                        onInput=${handleMaxChange}",
      "                        onKeyDown=${(e) => handleKeyDown(e, 'max')}",
      "                        placeholder=\"1\"",
      "                        class=\"max-input\"",
      "                        step=\"0.1\"",
      "                    />",
      "                </div>",
      "            </div>",
      "        </div>",
      "    `",
      "}",
      "",
      "const FeatureAdder = () => {",
      "    const [features, setFeatures] = useState({})",
      "    const [newFeatureName, setNewFeatureName] = useState('')",
      "    const [isDrawerOpen, setIsDrawerOpen] = useState(false)",
      "    const [isPresentationMode, setIsPresentationMode] = useState(false)",
      "    const toggleButtonRef = useRef(null)",
      "    const drawerRef = useRef(null)",
      "    const newFeatureInputRef = useRef(null)",
      "    const prevFeaturesLength = useRef(0)",
      "    const editorCursorPositionRef = useRef(null) // Store cursor position",
      "",
      "    // Focus the new feature input when drawer opens or monaco when drawer closes",
      "    useEffect(() => {",
      "        if (isDrawerOpen && newFeatureInputRef.current) {",
      "            // Store current cursor position before focusing drawer",
      "            try {",
      "                const editor = window.monaco?.editor?.getEditors?.()?.[0]",
      "                if (editor) {",
      "                    editorCursorPositionRef.current = editor.getPosition()",
      "                }",
      "            } catch (e) {",
      "                console.error('Error saving cursor position:', e)",
      "            }",
      "",
      "            // Small delay to ensure DOM is ready and drawer animation has started",
      "            setTimeout(() => {",
      "                newFeatureInputRef.current.focus()",
      "            }, 50)",
      "        } else if (!isDrawerOpen) {",
      "            // Focus monaco editor when drawer closes",
      "            setTimeout(() => {",
      "                try {",
      "                    const editor = window.monaco?.editor?.getEditors?.()?.[0]",
      "                    if (editor) {",
      "                        editor.focus()",
      "                        // Restore cursor position if we have one saved",
      "                        if (editorCursorPositionRef.current) {",
      "                            editor.setPosition(editorCursorPositionRef.current)",
      "                            editor.revealPositionInCenter(editorCursorPositionRef.current)",
      "                        }",
      "                    }",
      "                } catch (e) {",
      "                    console.error('Error restoring cursor position:', e)",
      "                }",
      "            }, 50)",
      "        }",
      "    }, [isDrawerOpen])",
      "",
      "    useEffect(() => {",
      "        const currentLength = Object.keys(features).length",
      "        if (currentLength > prevFeaturesLength.current && toggleButtonRef.current) {",
      "            const button = toggleButtonRef.current",
      "            button.classList.remove('wiggle')",
      "            button.classList.add('wiggle')",
      "            setTimeout(() => button.classList.remove('wiggle'), 1000)",
      "        }",
      "        prevFeaturesLength.current = currentLength",
      "    }, [features])",
      "",
      "    // Add global keyboard shortcut for opening drawer",
      "    useEffect(() => {",
      "        const handleGlobalKeyDown = (event) => {",
      "            // Check for Command/Control + Shift + D",
      "            if ((event.metaKey || event.ctrlKey) && event.shiftKey && event.key.toLowerCase() === 'd') {",
      "                event.preventDefault() // Prevent browser default actions",
      "                setIsDrawerOpen(!isDrawerOpen) // Toggle drawer state",
      "            }",
      "",
      "            // Check for Command/Control + Shift + E (presentation mode)",
      "            if ((event.metaKey || event.ctrlKey) && event.shiftKey && event.key.toLowerCase() === 'e') {",
      "                event.preventDefault() // Prevent browser default actions",
      "                openRendererInANewWindowAndControlIt() // Toggle presentation mode",
      "            }",
      "        }",
      "",
      "        // Add keyboard listener globally",
      "        document.addEventListener('keydown', handleGlobalKeyDown)",
      "",
      "        // Clean up",
      "        return () => {",
      "            document.removeEventListener('keydown', handleGlobalKeyDown)",
      "        }",
      "    }, [isDrawerOpen, isPresentationMode]) // Add dependencies",
      "",
      "    const openRendererInANewWindowAndControlIt = () => {",
      "       // open renderer in a new window",
      "       const newWindow = window.open(window.location.href.replace('edit', 'index'), '_blank', 'width=1000,height=1000')",
      "       sendCranesStateToNewWindow(newWindow)",
      "    }",
      "",
      "    const sendCranesStateToNewWindow = (newWindow) => {",
      "        //get the shaderCode = window.cranes.shader",
      "        const shaderCode = window.cranes.shader",
      "        newWindow.postMessage({ type: 'update-params', data: { shaderCode, ...window.cranes.flattenFeatures()}})",
      "        requestAnimationFrame( () => sendCranesStateToNewWindow(newWindow))",
      "    }",
      "",
      "    // Add click outside handler",
      "    useEffect(() => {",
      "        const handleClickOutside = (event) => {",
      "            // If drawer is closed or click is inside drawer or on toggle button, do nothing",
      "            if (!isDrawerOpen ||",
      "                !drawerRef.current ||",
      "                drawerRef.current.contains(event.target) ||",
      "                (toggleButtonRef.current && toggleButtonRef.current.contains(event.target))) {",
      "                return",
      "            }",
      "",
      "            // Close the drawer",
      "            setIsDrawerOpen(false)",
      "        }",
      "",
      "        // Handle Escape key to close drawer",
      "        const handleEscKey = (event) => {",
      "            if (event.key === 'Escape' && isDrawerOpen) {",
      "                setIsDrawerOpen(false)",
      "            }",
      "        }",
      "",
      "        // Add event listener when drawer is open",
      "        if (isDrawerOpen) {",
      "            document.addEventListener('mousedown', handleClickOutside)",
      "            document.addEventListener('keydown', handleEscKey)",
      "        }",
      "",
      "        // Clean up",
      "        return () => {",
      "            document.removeEventListener('mousedown', handleClickOutside)",
      "            document.removeEventListener('keydown', handleEscKey)",
      "        }",
      "    }, [isDrawerOpen])",
      "",
      "    const handleShaderParam = async (searchParams) => {",
      "        if (!searchParams.has('shader')) return false",
      "",
      "        try {",
      "            const shaderCode = await getRelativeOrAbsoluteShaderUrl(searchParams.get('shader'))",
      "            localStorage.setItem('cranes-manual-code', shaderCode)",
      "            const newUrl = new URL(window.location)",
      "            newUrl.searchParams.delete('shader')",
      "            window.history.replaceState({}, '', newUrl)",
      "            window.location.reload()",
      "            return true",
      "        } catch (error) {",
      "            console.error('Failed to fetch shader:', error)",
      "            return false",
      "        }",
      "    }",
      "",
      "    const initializeFeatures = (searchParams) => {",
      "        const initialFeatures = {}",
      "        searchParams.forEach((value, key) => {",
      "            if (isNaN(value)) return",
      "            const [featureName, paramType] = key.includes('.') ? key.split('.') : [key, 'value']",
      "            if (!initialFeatures[featureName]) {",
      "                initialFeatures[featureName] = { min: 0, max: 1, value: 0.5 }",
      "            }",
      "            initialFeatures[featureName][paramType] = parseFloat(value)",
      "        })",
      "        return initialFeatures",
      "    }",
      "",
      "    const handleUIState = (searchParams) => {",
      "        if (searchParams.has('present')) {",
      "            document.body.classList.add('present')",
      "            setIsPresentationMode(true)",
      "        }",
      "        if (searchParams.has('open_sliders')) setIsDrawerOpen(true)",
      "    }",
      "",
      "    useEffect(() => {",
      "        const init = async () => {",
      "            const searchParams = new URLSearchParams(window.location.search)",
      "",
      "            const shaderHandled = await handleShaderParam(searchParams)",
      "            if (shaderHandled) return",
      "",
      "            const initialFeatures = initializeFeatures(searchParams)",
      "            setFeatures(initialFeatures)",
      "            prevFeaturesLength.current = Object.keys(initialFeatures).length",
      "            handleUIState(searchParams)",
      "        }",
      "",
      "        init()",
      "    }, [])",
      "",
      "    const toggleDrawer = () => {",
      "        setIsDrawerOpen(!isDrawerOpen)",
      "    }",
      "",
      "    const updateFeature = (name, updatedFeature) => {",
      "        updatedFeature.min = updatedFeature.min ?? 0",
      "        updatedFeature.max = updatedFeature.max ?? 1",
      "        updatedFeature.value = Math.round(updatedFeature.value * 1000) / 1000",
      "        setFeatures((prev) => ({ ...prev, [name]: updatedFeature }))",
      "    }",
      "",
      "    window.cranes.updateFeature = (name, value) => {",
      "        updateFeature(name, { ...features[name], value })",
      "    }",
      "",
      "    const addNewFeature = () => {",
      "        if (!newFeatureName.trim()) {",
      "            alert('Feature name cannot be empty')",
      "            return",
      "        }",
      "        const newFeature = { value: 0.5, min: 0, max: 1 }",
      "        updateFeature(newFeatureName, newFeature)",
      "        setNewFeatureName('')",
      "    }",
      "",
      "    const deleteFeature = (name) => {",
      "        const { [name]: _, ...rest } = features",
      "        setFeatures(rest)",
      "        updateUrl({ [name]: null, [`${name}.min`]: null, [`${name}.max`]: null })",
      "        delete window.cranes?.manualFeatures[name]",
      "    }",
      "",
      "    const handleNewFeatureKeyDown = (e) => {",
      "        if (e.key === 'Enter' && newFeatureName.trim()) {",
      "            addNewFeature()",
      "        }",
      "    }",
      "",
      "    return html`",
      "        <${Fragment}>",
      "            <button",
      "                ref=${toggleButtonRef}",
      "                className=\"drawer-toggle\"",
      "                onClick=${toggleDrawer}",
      "            >",
      "                ${isDrawerOpen ? '\u00d7' : '\u2699\ufe0f'}",
      "            </button>",
      "            <div",
      "                ref=${drawerRef}",
      "                className=${`sparkly animated ${isDrawerOpen ? 'open' : ''}`}",
      "                id=\"feature-editor\"",
      "            >",
      "                <div className=\"new-feature\">",
      "                    <input",
      "                        type=\"text\"",
      "                        value=${newFeatureName}",
      "                        onInput=${(e) => setNewFeatureName(e.target.value)}",
      "                        onKeyDown=${handleNewFeatureKeyDown}",
      "                        placeholder=\"Enter new feature name and press Enter\"",
      "                        ref=${newFeatureInputRef}",
      "                    />",
      "                </div>",
      "                <div id=\"existing-features-editor\">",
      "                    ${Object.entries(features).map(",
      "                        ([name, feature]) => html`",
      "                            <${FeatureEditor}",
      "                                key=${name}",
      "                                name=${name}",
      "                                feature=${feature}",
      "                                onChange=${updateFeature}",
      "                                onDelete=${deleteFeature}",
      "                            />",
      "                        `",
      "                    )}",
      "                </div>",
      "            </div>",
      "        </${Fragment}>",
      "    `",
      "}",
      "",
      "function stripQueryParams(url) {",
      "    const allowedParams = new Set(['image', 'fullscreen']);",
      "    const parsedUrl = new URL(url);",
      "    for (const key of parsedUrl.searchParams.keys()) {",
      "      if (!allowedParams.has(key)) {",
      "        parsedUrl.searchParams.delete(key);",
      "      }",
      "    }",
      "    return parsedUrl.toString();",
      "  }",
      "",
      "window.stripQueryParams = stripQueryParams",
      "render(html`<${FeatureAdder} />`, document.getElementById('feature-editor-root'))",
      "",
      ""
    ],
    "file:///Users/redaphid/Projects/paper-cranes/edit.html": [
      "<!doctype html>",
      "<html lang=\"en\">",
      "",
      "<head>",
      "    <link rel=\"stylesheet\" href=\"edit.css\" />",
      "    <link rel=\"stylesheet\" data-name=\"vs/editor/editor.main\"",
      "        href=\"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.52.2/min/vs/editor/editor.main.min.css\">",
      "    <title>Paper Cranes - Editor</title>",
      "    <script type=\"module\" src=\"./src/worker-communication.js\"></script>",
      "</head>",
      "",
      "<body class=\"ready\">",
      "    <div id=\"feature-editor-root\"></div>",
      "    <div id=\"visualizer-container\">",
      "        <canvas id=\"visualizer\" width=\"1920\" height=\"1920\"></canvas>",
      "    </div>",
      "    <div id=\"save-and-publish\" class=\"sparkly animated\">",
      "        <button id=\"save\">Save</button>",
      "        <button id=\"publish\">",
      "            Publish",
      "        </button>",
      "        <button id=\"reset\">Reset</button>",
      "    </div>",
      "    <div id=\"monaco-editor\"></div>",
      "    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.52.2/min/vs/loader.min.js\"></script>",
      "    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.52.2/min/vs/editor/editor.main.js\"></script>",
      "",
      "    <script type=\"module\" src=\"./src/monaco.js\"></script>",
      "    <script type=\"module\" src=\"./index.js\"></script>",
      "    <script type=\"module\" src=\"./edit.js\"></script>",
      "    <script type=\"module\" src=\"./src/midi.js\"></script>",
      "</body>",
      "",
      "</html>",
      ""
    ]
  },
  "newlyCreatedFiles": [],
  "newlyCreatedFolders": [],
  "lastUpdatedAt": 1745799541007,
  "createdAt": 1745799162701,
  "hasChangedContext": true,
  "capabilities": [
    {
      "type": 15,
      "data": {
        "bubbleDataMap": "{}"
      }
    },
    {
      "type": 17,
      "data": {}
    },
    {
      "type": 14,
      "data": {}
    },
    {
      "type": 22,
      "data": {}
    },
    {
      "type": 18,
      "data": {}
    },
    {
      "type": 19,
      "data": {}
    },
    {
      "type": 23,
      "data": {}
    },
    {
      "type": 6,
      "data": {}
    },
    {
      "type": 16,
      "data": {}
    },
    {
      "type": 21,
      "data": {}
    },
    {
      "type": 24,
      "data": {}
    }
  ],
  "name": "Display Current Knob in Edit UI",
  "codebaseSearchSettings": {},
  "isFileListExpanded": false,
  "unifiedMode": "agent",
  "forceMode": "edit",
  "usageData": {},
  "allAttachedFileCodeChunksUris": [
    "file:///Users/redaphid/Projects/paper-cranes/edit.js",
    "file:///Users/redaphid/Projects/paper-cranes/edit.html"
  ],
  "latestConversationSummary": {
    "summary": {
      "summary": "\n- The user initially requested to add a visual indicator in the UI to display the name of a knob when its value changes, suggesting it should be obvious and visible in the edit UI.\n- The assistant proposed to modify the `FeatureEditor` component to show the knob number next to the feature name, but the user clarified they wanted this information visible even when the feature drawer was closed.\n- The assistant then suggested displaying the active knobs outside the drawer, which the user rejected, indicating they wanted the knob name displayed next to the \"Reset\" button instead.\n- After realizing the \"Reset\" button was in `edit.html`, the assistant planned to add a placeholder for the last changed knob and update it dynamically from the `FeatureAdder` component in `edit.js`.\n- The final implementation involved adding a `span` next to the \"Reset\" button in `edit.html` and updating its content based on the last changed knob using a `useEffect` hook in `edit.js`, ensuring the user would see the last adjusted knob's name clearly in the UI.\n",
      "truncationLastBubbleIdInclusive": "b52f40a4-1807-494f-8585-a02255e32ba6",
      "clientShouldStartSendingFromInclusiveBubbleId": "90aecd75-1262-4835-8926-0c2701a1a857",
      "previousConversationSummaryBubbleId": "",
      "includesToolResults": false
    },
    "lastBubbleId": "82ee9414-7496-45ab-b5b2-52564d8f34cc"
  },
  "tokenCount": 4112,
  "latestChatGenerationUUID": "90cd7ad2-3484-4fbb-a7d3-983ab7b5d225",
  "isAgentic": true
}