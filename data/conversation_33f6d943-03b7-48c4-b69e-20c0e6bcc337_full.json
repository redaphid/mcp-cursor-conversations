{
  "_v": 3,
  "composerId": "33f6d943-03b7-48c4-b69e-20c0e6bcc337",
  "richText": "{\"root\":{\"children\":[{\"children\":[],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":null,\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}}",
  "hasLoaded": true,
  "text": "",
  "fullConversationHeadersOnly": [
    {
      "bubbleId": "8a228fd3-2523-43ff-854d-9b9fbb06046d",
      "type": 1
    },
    {
      "bubbleId": "246cbf52-c271-455f-b4e0-9f04d35056aa",
      "type": 2,
      "serverBubbleId": "5b8c764d-17da-4d53-94e9-67b2d6a7e852"
    },
    {
      "bubbleId": "a8e8c4de-8bd8-4011-bce9-6f6cc37697ad",
      "type": 2
    },
    {
      "bubbleId": "02d1c064-3801-48c9-9341-1d431c78388f",
      "type": 2,
      "serverBubbleId": "b503ddb1-1078-4c78-a41c-f11298182fe6"
    },
    {
      "bubbleId": "47386261-51d7-4351-a1fc-5323de937bed",
      "type": 2
    },
    {
      "bubbleId": "ea2e440b-4923-40d8-95f1-23579a6443af",
      "type": 2,
      "serverBubbleId": "23998584-425d-4b70-b9a7-2f3ea90fd4c5"
    },
    {
      "bubbleId": "2fa1994d-c1a1-4256-a244-726b9bec6ed6",
      "type": 2
    },
    {
      "bubbleId": "a809d08f-c972-4870-9d9d-cdefda43ea87",
      "type": 2,
      "serverBubbleId": "0ea339ee-3b69-49b8-9aac-4aa185b9854f"
    },
    {
      "bubbleId": "920b48fe-e862-47d8-a164-68af805b6f54",
      "type": 1
    },
    {
      "bubbleId": "b171be1d-23b2-4abf-836c-4df130d6c5ce",
      "type": 2,
      "serverBubbleId": "75d41d46-2cc2-4670-94eb-c39afede17ae"
    },
    {
      "bubbleId": "cc41f710-ac8b-4576-8270-15669fd796db",
      "type": 2
    },
    {
      "bubbleId": "4e004715-5b1e-45aa-b712-409204e0ef3b",
      "type": 2,
      "serverBubbleId": "7e8c7787-db91-4842-8c75-b27d975f4372"
    },
    {
      "bubbleId": "1a45e6a8-4d04-4213-ba95-aad42e40dcc5",
      "type": 1
    },
    {
      "bubbleId": "6eddcbb1-bb0f-406b-967a-36894aa78de9",
      "type": 2,
      "serverBubbleId": "a9e6db4a-9ea2-4879-a563-da74c4a95d96"
    },
    {
      "bubbleId": "27b26581-fea4-45cc-b339-0d62b286d6a2",
      "type": 1
    },
    {
      "bubbleId": "b72e989a-f58b-4b1a-8f4c-9c6be7cd3f74",
      "type": 2,
      "serverBubbleId": "94a84e6c-b18f-4467-a5c6-e890d0fecd05"
    },
    {
      "bubbleId": "57348253-a2ba-4533-baff-6d4f914a31f4",
      "type": 2
    },
    {
      "bubbleId": "eb905e4f-01c6-4a51-a532-8398e69296ee",
      "type": 2,
      "serverBubbleId": "2b784010-f1d2-42be-8183-6e080ccba4f0"
    },
    {
      "bubbleId": "a2d622fa-3e0a-4455-bfe4-d5f35c2066e5",
      "type": 2
    },
    {
      "bubbleId": "4d24dcb0-ee3c-4174-bd41-1ff6d714ead0",
      "type": 2,
      "serverBubbleId": "9136e77a-184b-41c0-83f3-ae9bcdb821c5"
    },
    {
      "bubbleId": "808d6ee6-0e1a-47fa-b877-a2c310e22657",
      "type": 2
    },
    {
      "bubbleId": "ff8827dd-121e-4ba2-8e4e-b24f0715f1c7",
      "type": 2,
      "serverBubbleId": "41ac3092-5cfc-4d4e-a01a-db8f8a0abf2c"
    },
    {
      "bubbleId": "77ae8206-60c2-48d7-9f45-89a40be1e8e7",
      "type": 1
    },
    {
      "bubbleId": "8a1306f0-0d6e-45d8-b8c4-dc7434b532d7",
      "type": 2,
      "serverBubbleId": "24bb4306-bd16-4282-a9ca-a88312b1a714"
    },
    {
      "bubbleId": "31f29aaa-9cb1-411c-a672-fcfd35586bb1",
      "type": 2
    },
    {
      "bubbleId": "87153c77-3d54-4044-b2c8-e441881c35c6",
      "type": 2,
      "serverBubbleId": "b3adcf64-1973-4970-b4d3-eeccf6ff7fc6"
    },
    {
      "bubbleId": "6b452b9e-14aa-46ae-b0af-338289000555",
      "type": 2,
      "serverBubbleId": "2154c032-8de0-4c65-b2d0-e286d78b7ef7"
    },
    {
      "bubbleId": "af0fc9f3-a099-4b4c-95f1-567f44cf5993",
      "type": 2
    },
    {
      "bubbleId": "2c653da3-c255-46bd-8e3a-8fe0ef613334",
      "type": 2,
      "serverBubbleId": "5e3eeabd-bd53-45f4-8298-86bce2c0a867"
    },
    {
      "bubbleId": "0e2dd2c2-ebfa-4f68-ae70-81359cedde2d",
      "type": 2
    },
    {
      "bubbleId": "85b8395e-0e03-46ed-88ee-452725896eaa",
      "type": 2,
      "serverBubbleId": "0c2a22fd-a652-4f49-8c66-60f61ec28c44"
    },
    {
      "bubbleId": "88633805-8fd6-4b40-b2c0-b86f942005a5",
      "type": 2
    },
    {
      "bubbleId": "c60b3dc1-7751-422e-83a1-c8acf26a7089",
      "type": 2,
      "serverBubbleId": "ce698ac8-e71d-4fc6-9950-da2d46484c2c"
    },
    {
      "bubbleId": "e5f96fc8-0dbd-4e9f-a482-f2e52347f7c0",
      "type": 2
    },
    {
      "bubbleId": "5b618d5f-0349-4f8f-8ab2-73175785167e",
      "type": 2,
      "serverBubbleId": "a4f25b4e-89c3-46f0-8d1c-3958fac83661"
    },
    {
      "bubbleId": "9ca23d6b-b42e-45e1-a5c5-9e70e67e350b",
      "type": 1
    },
    {
      "bubbleId": "05993a6d-1757-4084-b9e7-d0248dfd4fa9",
      "type": 2,
      "serverBubbleId": "64ddeb40-2124-41a4-8f03-8d3da5500b33"
    },
    {
      "bubbleId": "1c41e25a-d885-48bd-a894-6f1cd783cd38",
      "type": 2
    },
    {
      "bubbleId": "a41835cd-0d91-4eb1-803f-622d3d9f19af",
      "type": 2,
      "serverBubbleId": "5db9f1c2-8137-4bf6-af8b-fdfade134cbe"
    },
    {
      "bubbleId": "d7f36613-59a9-425b-a7b6-115efd2894f8",
      "type": 2
    },
    {
      "bubbleId": "a37e0c23-dc1f-4f07-9bde-390b049d6502",
      "type": 2,
      "serverBubbleId": "07283bbd-3c24-402d-b797-253c7714cfe8"
    },
    {
      "bubbleId": "db6f6ad7-94b9-4972-8bd6-3329e84c6d03",
      "type": 2
    },
    {
      "bubbleId": "51180d6d-2d5d-41d4-8104-2e5b37f663c7",
      "type": 2,
      "serverBubbleId": "560987f4-1745-45ab-a76c-d4a4d58107c8"
    },
    {
      "bubbleId": "797839e6-5d53-47c0-883b-46934fb09942",
      "type": 2
    },
    {
      "bubbleId": "5f165297-282b-4c09-b49d-2fc35ade4d05",
      "type": 2,
      "serverBubbleId": "d23ae59d-c0c2-4489-94c1-e9d02f33b206"
    },
    {
      "bubbleId": "ee1ecb4b-189c-4157-9501-786f5278edc4",
      "type": 1
    },
    {
      "bubbleId": "9d1e7105-35ed-43e0-b4f6-eead43845efe",
      "type": 2,
      "serverBubbleId": "01f10a69-9f36-4aed-989e-b91a34cf0c23"
    },
    {
      "bubbleId": "bc302b43-2a32-458a-9549-27b3935b8e1b",
      "type": 2
    },
    {
      "bubbleId": "b2dd2cde-d450-411e-af6d-b8a45124246c",
      "type": 2,
      "serverBubbleId": "2abad85a-444e-4764-be62-b16e2554c81a"
    },
    {
      "bubbleId": "772e37a8-423f-4f1a-b559-fc44aefb20cd",
      "type": 2
    },
    {
      "bubbleId": "580582d4-c02d-469f-be85-757b2fa5e0fc",
      "type": 1
    },
    {
      "bubbleId": "facbf732-b401-4215-8abf-ba2452ce4ab0",
      "type": 2,
      "serverBubbleId": "96be265b-7a6a-4ae5-9b6e-05c1ca5758fc"
    },
    {
      "bubbleId": "339a4bb1-cc9b-46a4-9022-6ce9df27348a",
      "type": 2
    },
    {
      "bubbleId": "01045aaa-1de4-4aee-9296-a8b79df3e3d6",
      "type": 2,
      "serverBubbleId": "a0f0de18-33ea-486c-855b-bcc23e7a66a2"
    },
    {
      "bubbleId": "4d3853b2-c2d5-4e63-a01f-ca7420eacc84",
      "type": 2
    },
    {
      "bubbleId": "29526457-7323-4026-88a6-52a70738d289",
      "type": 1
    },
    {
      "bubbleId": "e6d0b370-4487-4d89-a5a1-c5c08de0216d",
      "type": 2,
      "serverBubbleId": "0a475425-41e2-44e5-8f6f-7603a9e32b0a"
    },
    {
      "bubbleId": "12e01790-4609-4b15-beeb-bf72128e3115",
      "type": 1
    },
    {
      "bubbleId": "1c8865fc-bc4f-4928-b7d1-1f83b9c2b798",
      "type": 2,
      "serverBubbleId": "60ce9c6c-eeca-4ff5-bd93-7843b8da3ce1"
    },
    {
      "bubbleId": "22a84214-3909-4ecf-92c2-6d0218a9e433",
      "type": 2
    },
    {
      "bubbleId": "e49a81fa-20c2-4d63-99fc-bca99cd1f822",
      "type": 2,
      "serverBubbleId": "2c74cdbb-3c92-4a8f-9524-337dd0e3c21a"
    },
    {
      "bubbleId": "38c91bfc-9d76-4eb9-9c0d-da4b8b346c75",
      "type": 2
    },
    {
      "bubbleId": "86a9cad8-3527-4f94-a243-d2afb9d5cb34",
      "type": 2,
      "serverBubbleId": "d995f7ab-ab85-4783-97e6-d2d096d873e7"
    },
    {
      "bubbleId": "379d31ca-d6ff-4378-af1b-ebcf24825488",
      "type": 2,
      "serverBubbleId": "e871fd7c-eb24-4a61-b4bd-0557d77c2131"
    },
    {
      "bubbleId": "8edbaf65-e0a5-4d6b-80d0-5ce2d32d9d80",
      "type": 2
    },
    {
      "bubbleId": "d9decc3a-108e-4c12-83cc-3ddd117c38d9",
      "type": 2,
      "serverBubbleId": "57a37b5c-0a6d-499d-9176-cf95aefc8863"
    },
    {
      "bubbleId": "dd58e381-f82d-4771-bedb-2e0cfed07808",
      "type": 2,
      "serverBubbleId": "3ef5cee3-7b02-493f-ba43-25925b768025"
    },
    {
      "bubbleId": "7a3c4473-9eb7-4f05-b03d-1aca8bcb8f33",
      "type": 2
    },
    {
      "bubbleId": "59f543cf-fd1b-468e-8d12-be09c1092810",
      "type": 2,
      "serverBubbleId": "d2e9228d-070c-462c-8598-a4de409ac9c5"
    },
    {
      "bubbleId": "a7b79123-f241-4701-9562-c2457daa53a8",
      "type": 2,
      "serverBubbleId": "bfc86bdb-c3a6-4a76-bf9c-3249b8ff35a6"
    },
    {
      "bubbleId": "e8ea635f-32f6-42a5-b298-032b9d321695",
      "type": 2
    },
    {
      "bubbleId": "a7bc09da-bdc1-44e3-82d1-2512804379b1",
      "type": 2,
      "serverBubbleId": "045ef072-902e-4769-8318-77a63ade480c"
    },
    {
      "bubbleId": "88fcbcfc-16b5-4f43-81e2-e69ad565063c",
      "type": 2,
      "serverBubbleId": "6c2fcfeb-cb89-4415-bcc9-869c05afa01d"
    },
    {
      "bubbleId": "2253c881-d08d-4bcb-ad85-43ab8ba6101c",
      "type": 1
    },
    {
      "bubbleId": "183bc8da-0567-40ee-a8e0-a1252eba9d9b",
      "type": 2,
      "serverBubbleId": "26b61192-8bc6-4f8a-aefb-bcdd04b05a08"
    },
    {
      "bubbleId": "794b0ce7-c604-4646-b430-6c4b156754e5",
      "type": 2
    },
    {
      "bubbleId": "319cfdf6-7b6e-4e57-bce5-1fc85e7a4071",
      "type": 2,
      "serverBubbleId": "d45cdcaa-e124-42ee-99ab-c34b2720787d"
    },
    {
      "bubbleId": "93081acc-8d4d-43a5-8ad2-eba5b0bee3a3",
      "type": 2,
      "serverBubbleId": "deaf98fb-9c51-41ac-89ae-dea5c3417a5d"
    },
    {
      "bubbleId": "670acbae-59b8-432a-9f5e-e69adcad1508",
      "type": 2
    },
    {
      "bubbleId": "5d151154-9fd5-402d-9ec2-6d97d87bdcf5",
      "type": 2,
      "serverBubbleId": "0eb95a9d-e997-438c-8c85-e0a3e73804e9"
    },
    {
      "bubbleId": "5b15a479-0f44-4b9e-b4e2-7690cf8f72fa",
      "type": 2
    },
    {
      "bubbleId": "5a57bd75-70ae-4bb3-a435-57ab07fac179",
      "type": 2,
      "serverBubbleId": "0dfab2c3-db29-4a8a-a9af-d5d2e4486c62"
    },
    {
      "bubbleId": "023f1475-95c1-4238-99c9-0dca28485823",
      "type": 1
    },
    {
      "bubbleId": "580b6ce9-19b1-4bcd-b10a-c6b032f8bc0e",
      "type": 2,
      "serverBubbleId": "cd6dc81d-7352-49e9-b89f-4cbc381b6dfc"
    },
    {
      "bubbleId": "29ecc00a-b247-4171-98a1-9f6a50613f20",
      "type": 2
    },
    {
      "bubbleId": "42209d70-524d-4246-a053-6804b6c80611",
      "type": 2,
      "serverBubbleId": "dba4fa6b-a05b-44d4-89b8-86d6d9351f32"
    },
    {
      "bubbleId": "30d76be3-c391-4a57-9666-1d76cdc3ca8a",
      "type": 2
    },
    {
      "bubbleId": "d5f69535-db1a-4c70-a059-d950eb9713d2",
      "type": 2,
      "serverBubbleId": "8795f098-57ad-4eb1-b5df-c86d68be5b8a"
    },
    {
      "bubbleId": "3a9d52f6-6acd-46c3-8164-ff295ca59ee1",
      "type": 2
    },
    {
      "bubbleId": "aa11327b-da4f-4916-a2ed-c06483e9a3f4",
      "type": 2,
      "serverBubbleId": "e34a051c-de6a-4a7b-a557-1870f64ad345"
    },
    {
      "bubbleId": "55a53631-b035-490f-bca7-a38615aaa767",
      "type": 2,
      "serverBubbleId": "1bd2e9f1-f254-48cb-b274-7c4fcdeaa604"
    },
    {
      "bubbleId": "9f9f51ac-e728-4ba2-a663-a564e6a8faa4",
      "type": 2
    },
    {
      "bubbleId": "7391287b-d475-44f4-8944-063c2d4c3624",
      "type": 2,
      "serverBubbleId": "0f6af845-944e-4dc0-8a81-4adc7884530c"
    },
    {
      "bubbleId": "836de708-d14b-4a50-b51c-faddb936d202",
      "type": 1
    },
    {
      "bubbleId": "4e251237-2548-486f-bf33-bc9f54842980",
      "type": 2,
      "serverBubbleId": "a4a3a748-b7f9-49ed-8fca-fa623b114d7c"
    },
    {
      "bubbleId": "4dac19e2-6b23-4dad-831e-2c763e63104c",
      "type": 2
    },
    {
      "bubbleId": "8e5e8c7f-0864-46d2-88df-911f9eacf18a",
      "type": 2,
      "serverBubbleId": "c92f47f0-8b14-4f0d-9528-d84cf77f071d"
    },
    {
      "bubbleId": "7897c76c-1066-4a74-bb8b-a4096230cf2b",
      "type": 2
    },
    {
      "bubbleId": "55dc3b42-16a6-4abe-a640-6a51e759e0bd",
      "type": 2,
      "serverBubbleId": "754d4c77-0333-4e55-8a98-a60575dd0fc8"
    },
    {
      "bubbleId": "ef938d41-cf01-44fb-bb0c-3a500abca122",
      "type": 2
    },
    {
      "bubbleId": "4e0bb7ed-4c4c-4080-a1f5-29e7f90cbe87",
      "type": 2
    }
  ],
  "conversationMap": {},
  "status": "aborted",
  "context": {
    "notepads": [],
    "composers": [],
    "quotes": [],
    "selectedCommits": [],
    "selectedPullRequests": [],
    "selectedImages": [],
    "folderSelections": [],
    "fileSelections": [
      {
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/README.md",
          "external": "file:///Users/redaphid/Projects/mcp-memory/README.md",
          "path": "/Users/redaphid/Projects/mcp-memory/README.md",
          "scheme": "file"
        },
        "addedWithoutMention": true,
        "autoContext": true
      }
    ],
    "selections": [],
    "terminalSelections": [],
    "selectedDocs": [],
    "externalLinks": [],
    "cursorRules": [],
    "uiElementSelections": [],
    "mentions": {
      "notepads": {},
      "composers": {},
      "quotes": {},
      "selectedCommits": {},
      "selectedPullRequests": {},
      "gitDiff": [],
      "gitDiffFromBranchToMain": [],
      "selectedImages": {},
      "usesCodebase": [],
      "useWeb": [],
      "folderSelections": {},
      "fileSelections": {},
      "terminalFiles": {},
      "selections": {},
      "terminalSelections": {},
      "selectedDocs": {},
      "externalLinks": {
        "https://mcp-memory.loqwai.workers.dev/": []
      },
      "useLinterErrors": [],
      "useDiffReview": [],
      "useGenerateRules": [],
      "useContextPicking": [],
      "useRememberThis": [],
      "diffHistory": [],
      "cursorRules": {},
      "autoContext": [],
      "uiElementSelections": {}
    }
  },
  "gitGraphFileSuggestions": [],
  "generatingBubbleIds": [],
  "isReadingLongFile": false,
  "codeBlockData": {
    "file:///Users/redaphid/Projects/mcp-memory/src/index.ts": [
      {
        "_v": 2,
        "bubbleId": "47386261-51d7-4351-a1fc-5323de937bed",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/src/index.ts",
          "external": "file:///Users/redaphid/Projects/mcp-memory/src/index.ts",
          "path": "/Users/redaphid/Projects/mcp-memory/src/index.ts",
          "scheme": "file"
        },
        "version": 0,
        "status": "accepted",
        "languageId": "typescript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "ddbbb3bf-8eb5-4b54-8c72-6a273d3c971d",
        "intermediateModelLines": [],
        "lastDiffId": "fca10d57-3751-4e1c-a1ab-d5ef0c7e103c",
        "diffId": "c4133c93-dac4-4513-b2e8-7fa5f0cfc03d",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "db6f6ad7-94b9-4972-8bd6-3329e84c6d03",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/src/index.ts",
          "external": "file:///Users/redaphid/Projects/mcp-memory/src/index.ts",
          "path": "/Users/redaphid/Projects/mcp-memory/src/index.ts",
          "scheme": "file"
        },
        "version": 1,
        "status": "accepted",
        "languageId": "typescript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "e60354e6-4950-4e7a-bba5-edb54e8594b0",
        "intermediateModelLines": [],
        "lastDiffId": "205b1965-7d23-4000-a6ba-8f072f43e3aa",
        "diffId": "4dd36220-a3be-4c8c-8cc6-552cc1c8eec2",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "670acbae-59b8-432a-9f5e-e69adcad1508",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/src/index.ts",
          "external": "file:///Users/redaphid/Projects/mcp-memory/src/index.ts",
          "path": "/Users/redaphid/Projects/mcp-memory/src/index.ts",
          "scheme": "file"
        },
        "version": 2,
        "status": "accepted",
        "languageId": "typescript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "3e7ade4e-54e0-47f7-aebe-14f151a40d13",
        "intermediateModelLines": [],
        "lastDiffId": "c2d1f21c-4727-4781-8d2c-3b4d3eb9c843",
        "diffId": "b98a9271-7e61-4d36-a8c5-77ee5050a026",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "30d76be3-c391-4a57-9666-1d76cdc3ca8a",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/src/index.ts",
          "external": "file:///Users/redaphid/Projects/mcp-memory/src/index.ts",
          "path": "/Users/redaphid/Projects/mcp-memory/src/index.ts",
          "scheme": "file"
        },
        "version": 3,
        "status": "accepted",
        "languageId": "typescript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "a6daea8f-fa16-4ad5-bffc-86c6204cd4bb",
        "intermediateModelLines": [],
        "lastDiffId": "c239e382-e7fb-4796-907b-74de01f77371",
        "diffId": "a97b55ee-dfe3-44c8-a56a-3451202ccc1f",
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/oracle.js": [
      {
        "_v": 2,
        "bubbleId": "2fa1994d-c1a1-4256-a244-726b9bec6ed6",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/oracle.js",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/oracle.js",
          "path": "/Users/redaphid/Projects/mcp-memory/static/oracle.js",
          "scheme": "file"
        },
        "version": 0,
        "status": "accepted",
        "languageId": "javascript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "8f1a8c6e-41dd-4481-a330-7a53ed5a1e12",
        "intermediateModelLines": [],
        "lastDiffId": "ba98ddb3-5fa6-4486-89b8-d473cdb8d8bd",
        "diffId": "2ae4cfc0-cc49-4bf4-96ab-d2646155b0fa",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "a2d622fa-3e0a-4455-bfe4-d5f35c2066e5",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/oracle.js",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/oracle.js",
          "path": "/Users/redaphid/Projects/mcp-memory/static/oracle.js",
          "scheme": "file"
        },
        "version": 1,
        "status": "accepted",
        "languageId": "javascript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "73bf15c0-527e-4b21-a80c-ceeb1185f95a",
        "intermediateModelLines": [],
        "lastDiffId": "acd25d2c-9ec9-4929-a922-50979fe90efb",
        "diffId": "26fc4800-afda-437f-9b96-9616e92e6492",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "88633805-8fd6-4b40-b2c0-b86f942005a5",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/oracle.js",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/oracle.js",
          "path": "/Users/redaphid/Projects/mcp-memory/static/oracle.js",
          "scheme": "file"
        },
        "version": 2,
        "status": "accepted",
        "languageId": "javascript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "796a7ac4-3136-47aa-b626-abc9d981f7ff",
        "intermediateModelLines": [],
        "lastDiffId": "156f4237-c142-42c0-b49e-fa465e286004",
        "diffId": "a58b82e2-91bc-4537-9a55-7f7d95027c5e",
        "chainedInfo": {
          "chainedFromVersion": 1
        },
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/mcp-memory/src/mcp.ts": [
      {
        "_v": 2,
        "bubbleId": "cc41f710-ac8b-4576-8270-15669fd796db",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/src/mcp.ts",
          "external": "file:///Users/redaphid/Projects/mcp-memory/src/mcp.ts",
          "path": "/Users/redaphid/Projects/mcp-memory/src/mcp.ts",
          "scheme": "file"
        },
        "version": 0,
        "status": "accepted",
        "languageId": "typescript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "e8ed9469-04e9-4d09-879f-5c2a2c75b4b4",
        "intermediateModelLines": [],
        "lastDiffId": "4739827e-41dc-4635-a0f4-99b21982e9da",
        "diffId": "9d764c4c-4ce4-4cab-9cfa-667f32724199",
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/index.html": [
      {
        "_v": 2,
        "bubbleId": "57348253-a2ba-4533-baff-6d4f914a31f4",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/index.html",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/index.html",
          "path": "/Users/redaphid/Projects/mcp-memory/static/index.html",
          "scheme": "file"
        },
        "version": 0,
        "status": "accepted",
        "languageId": "html",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "3563bc94-e7e3-4989-9fd5-a2891297e469",
        "intermediateModelLines": [],
        "lastDiffId": "72fc9c46-1e7e-4215-b4b9-b82ed038b7fa",
        "diffId": "c90e85fe-5a20-4415-8742-5478c5cbdfd9",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "0e2dd2c2-ebfa-4f68-ae70-81359cedde2d",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/index.html",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/index.html",
          "path": "/Users/redaphid/Projects/mcp-memory/static/index.html",
          "scheme": "file"
        },
        "version": 1,
        "status": "accepted",
        "languageId": "html",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "c7879b71-5466-43a7-8cab-a1ee680080b1",
        "intermediateModelLines": [],
        "lastDiffId": "b45c0df3-640d-4437-9f51-532571e88dcf",
        "diffId": "c2d6bc52-b458-416f-9d41-7f8f80b451fb",
        "chainedInfo": {
          "chainedFromVersion": 0
        },
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx": [
      {
        "_v": 2,
        "bubbleId": "1c41e25a-d885-48bd-a894-6f1cd783cd38",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "path": "/Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "scheme": "file"
        },
        "version": 0,
        "status": "accepted",
        "languageId": "javascriptreact",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "417ffd96-ac4a-4f9a-b352-3bc1fd266ff3",
        "intermediateModelLines": [],
        "lastDiffId": "7de992c2-a0d2-4036-9fd3-1506fc492194",
        "diffId": "4cf64b54-6a4e-463f-a7ea-b0d4a75adcb7",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "bc302b43-2a32-458a-9549-27b3935b8e1b",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "path": "/Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "scheme": "file"
        },
        "version": 1,
        "status": "accepted",
        "languageId": "javascriptreact",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "9b7835e1-2a62-402d-b851-34aeb2f0ac41",
        "intermediateModelLines": [],
        "lastDiffId": "e5fc6aab-3bdd-45ae-9cfc-f039ba8ed18c",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "772e37a8-423f-4f1a-b559-fc44aefb20cd",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "path": "/Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "scheme": "file"
        },
        "version": 2,
        "status": "aborted",
        "languageId": "javascriptreact",
        "codeBlockDisplayPreference": "expanded"
      },
      {
        "_v": 2,
        "bubbleId": "339a4bb1-cc9b-46a4-9022-6ce9df27348a",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "path": "/Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
          "scheme": "file"
        },
        "version": 3,
        "status": "accepted",
        "languageId": "javascriptreact",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "ef5f2f52-23ee-4458-8b4e-2f8a51a07310",
        "intermediateModelLines": [],
        "lastDiffId": "55fcebb9-c060-4628-b822-26f02f88c4c4",
        "diffId": "71358c25-0edd-4f93-900f-c213273ea1a0",
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/admin.html": [
      {
        "_v": 2,
        "bubbleId": "d7f36613-59a9-425b-a7b6-115efd2894f8",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/admin.html",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/admin.html",
          "path": "/Users/redaphid/Projects/mcp-memory/static/admin.html",
          "scheme": "file"
        },
        "version": 0,
        "status": "accepted",
        "languageId": "html",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "094a4553-b5bc-44dd-8c0a-66026d321b4d",
        "intermediateModelLines": [],
        "lastDiffId": "0558b69c-45e6-42a7-96df-89422cbd6ef5",
        "diffId": "1773f63a-7a5d-4884-9532-6f9eda24e504",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "86a9cad8-3527-4f94-a243-d2afb9d5cb34",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/admin.html",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/admin.html",
          "path": "/Users/redaphid/Projects/mcp-memory/static/admin.html",
          "scheme": "file"
        },
        "version": 1,
        "status": "accepted",
        "languageId": "html",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "c300ac3a-5c0b-4679-89ae-9f1ce0c43d0b",
        "intermediateModelLines": [],
        "lastDiffId": "75612481-5b8d-4347-a09c-31eb4eccea81",
        "diffId": "945612c0-76cc-4a20-b7d8-5ab31251e1dc",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "d9decc3a-108e-4c12-83cc-3ddd117c38d9",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/admin.html",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/admin.html",
          "path": "/Users/redaphid/Projects/mcp-memory/static/admin.html",
          "scheme": "file"
        },
        "version": 2,
        "status": "accepted",
        "languageId": "html",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "1b11bec9-058d-4c5f-a7e8-7ca9ad072f9b",
        "intermediateModelLines": [],
        "lastDiffId": "a317e3f0-9a5c-400e-a537-d5c093ede05d",
        "diffId": "d5c8fae8-a7fc-46da-bcb8-8f420748caae",
        "isNoOp": false
      },
      {
        "_v": 2,
        "bubbleId": "29ecc00a-b247-4171-98a1-9f6a50613f20",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/admin.html",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/admin.html",
          "path": "/Users/redaphid/Projects/mcp-memory/static/admin.html",
          "scheme": "file"
        },
        "version": 3,
        "status": "accepted",
        "languageId": "html",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "baedf237-bc03-4d01-a2e3-ec0bcf98cfaa",
        "intermediateModelLines": [],
        "lastDiffId": "4193d048-525f-4910-b06d-7cbba4d777b3",
        "diffId": "b578bd75-13ea-42ef-884e-a306d4c62b28",
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/components/UserTree.tsx": [
      {
        "_v": 2,
        "bubbleId": "22a84214-3909-4ecf-92c2-6d0218a9e433",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/components/UserTree.tsx",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/components/UserTree.tsx",
          "path": "/Users/redaphid/Projects/mcp-memory/static/components/UserTree.tsx",
          "scheme": "file"
        },
        "version": 0,
        "status": "accepted",
        "languageId": "typescriptreact",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "4e0e1ca6-491e-4cef-95d7-ca203f4a2e18",
        "intermediateModelLines": [],
        "lastDiffId": "b971d2a5-2e5f-4ae3-9d37-112ff7efca81",
        "diffId": "b61af294-037a-4ee6-80f2-d527f5849d67",
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/admin.tsx": [
      {
        "_v": 2,
        "bubbleId": "8edbaf65-e0a5-4d6b-80d0-5ce2d32d9d80",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/admin.tsx",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/admin.tsx",
          "path": "/Users/redaphid/Projects/mcp-memory/static/admin.tsx",
          "scheme": "file"
        },
        "version": 0,
        "status": "accepted",
        "languageId": "typescriptreact",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "ea18d771-fb27-414c-abf2-6d619fe4b316",
        "intermediateModelLines": [],
        "lastDiffId": "06d6e02d-3bf3-4958-9d1f-ec78bbc5b025",
        "diffId": "2559b538-11ac-4632-a2da-99636efcd68e",
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/mcp-memory/package.json": [
      {
        "_v": 2,
        "bubbleId": "59f543cf-fd1b-468e-8d12-be09c1092810",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/package.json",
          "external": "file:///Users/redaphid/Projects/mcp-memory/package.json",
          "path": "/Users/redaphid/Projects/mcp-memory/package.json",
          "scheme": "file"
        },
        "version": 0,
        "status": "accepted",
        "languageId": "json",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "7982a686-e4e5-4ca5-8c4d-d68a995b1d7f",
        "intermediateModelLines": [],
        "lastDiffId": "cc8bf95d-f500-446a-832e-6031c677f1f7",
        "diffId": "2f80c95c-8661-4e94-9932-a35adab60f04",
        "isNoOp": false
      }
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/admin.js": [
      {
        "_v": 2,
        "bubbleId": "5b15a479-0f44-4b9e-b4e2-7690cf8f72fa",
        "codeBlockIdx": 0,
        "uri": {
          "$mid": 1,
          "fsPath": "/Users/redaphid/Projects/mcp-memory/static/admin.js",
          "external": "file:///Users/redaphid/Projects/mcp-memory/static/admin.js",
          "path": "/Users/redaphid/Projects/mcp-memory/static/admin.js",
          "scheme": "file"
        },
        "version": 0,
        "status": "accepted",
        "languageId": "javascript",
        "codeBlockDisplayPreference": "expanded",
        "latestApplyGenerationUUID": "b26e735a-965f-4e3a-95c0-52e53f5a5597",
        "intermediateModelLines": [],
        "lastDiffId": "14889ec0-abac-4a9b-8ee1-51ddea56f28c",
        "diffId": "f54398d5-d05b-48a9-a38e-3b66b524415f",
        "isNoOp": false
      }
    ]
  },
  "originalModelLines": {
    "file:///Users/redaphid/Projects/mcp-memory/src/index.ts": [
      "import { Hono } from \"hono\";",
      "import { MyMCP } from \"./mcp\";",
      "import { getAllMemoriesFromD1, initializeDatabase, deleteMemoryFromD1, updateMemoryInD1 } from \"./utils/db\";",
      "import { deleteVectorById, updateMemoryVector, searchMemories } from \"./utils/vectorize\";",
      "",
      "const app = new Hono<{",
      "  Bindings: Env;",
      "}>();",
      "",
      "// Initialize database once",
      "let dbInitialized = false;",
      "",
      "// Middleware for one-time database initialization",
      "app.use(\"*\", async (c, next) => {",
      "  if (!dbInitialized) {",
      "    try {",
      "      console.log(\"Attempting database initialization...\");",
      "      await initializeDatabase(c.env);",
      "      dbInitialized = true;",
      "      console.log(\"Database initialized successfully.\");",
      "    } catch (e) {",
      "      console.error(\"Failed to initialize D1 database:\", e);",
      "    }",
      "  }",
      "  await next();",
      "});",
      "",
      "// index.html",
      "app.get(\"/\", async (c) => await c.env.ASSETS.fetch(c.req.raw));",
      "",
      "// Get available namespaces (users and projects)",
      "app.get(\"/api/namespaces\", async (c) => {",
      "  try {",
      "    // Get distinct namespaces from the database",
      "    const result = await c.env.DB.prepare(`",
      "      SELECT DISTINCT namespace FROM memories",
      "    `).all();",
      "",
      "    const namespaces = {",
      "      users: [] as string[],",
      "      projects: [] as string[],",
      "      all: false",
      "    };",
      "",
      "    if (result.results) {",
      "      for (const row of result.results) {",
      "        const namespace = (row as any).namespace;",
      "        if (namespace.startsWith(\"user:\")) {",
      "          namespaces.users.push(namespace.substring(5));",
      "        } else if (namespace.startsWith(\"project:\")) {",
      "          namespaces.projects.push(namespace.substring(8));",
      "        } else if (namespace === \"all\") {",
      "          namespaces.all = true;",
      "        }",
      "      }",
      "    }",
      "",
      "    return c.json({ success: true, namespaces });",
      "  } catch (error) {",
      "    console.error(\"Error getting namespaces:\", error);",
      "    return c.json({ success: false, error: \"Failed to retrieve namespaces\" }, 500);",
      "  }",
      "});",
      "",
      "// Search across multiple namespaces",
      "app.post(\"/api/search\", async (c) => {",
      "  try {",
      "    const body = await c.req.json();",
      "    const { query, namespaces = [], dateFrom, dateTo } = body;",
      "",
      "    if (!query) {",
      "      return c.json({ error: \"Missing query parameter\" }, 400);",
      "    }",
      "",
      "    const results = [];",
      "    ",
      "    // Search each namespace",
      "    for (const namespace of namespaces) {",
      "      try {",
      "        const memories = await searchMemories(query, namespace, c.env);",
      "        ",
      "        // If date filtering is requested, we'll need to fetch from D1 to get dates",
      "        if (dateFrom || dateTo) {",
      "          const dbMemories = await c.env.DB.prepare(`",
      "            SELECT id, created_at FROM memories ",
      "            WHERE namespace = ? ",
      "            ${dateFrom ? \"AND created_at >= ?\" : \"\"}",
      "            ${dateTo ? \"AND created_at <= ?\" : \"\"}",
      "          `).bind(",
      "            namespace,",
      "            ...(dateFrom ? [dateFrom] : []),",
      "            ...(dateTo ? [dateTo] : [])",
      "          ).all();",
      "          ",
      "          const validIds = new Set((dbMemories.results || []).map((m: any) => m.id));",
      "          ",
      "          results.push({",
      "            namespace,",
      "            memories: memories.filter(m => validIds.has(m.id))",
      "          });",
      "        } else {",
      "          results.push({ namespace, memories });",
      "        }",
      "      } catch (error) {",
      "        console.error(`Error searching namespace ${namespace}:`, error);",
      "      }",
      "    }",
      "",
      "    return c.json({ ",
      "      success: true,",
      "      query,",
      "      results ",
      "    });",
      "  } catch (error) {",
      "    console.error(\"Error in multi-namespace search:\", error);",
      "    return c.json({ success: false, error: \"Failed to search memories\" }, 500);",
      "  }",
      "});",
      "",
      "// Get all memories for a namespace with pagination",
      "app.get(\"/:namespaceType/:namespaceId/memories\", async (c) => {",
      "  const namespaceType = c.req.param(\"namespaceType\");",
      "  const namespaceId = c.req.param(\"namespaceId\");",
      "  const namespace = `${namespaceType}:${namespaceId}`;",
      "  ",
      "  // Pagination parameters",
      "  const page = parseInt(c.req.query(\"page\") || \"1\");",
      "  const limit = parseInt(c.req.query(\"limit\") || \"20\");",
      "  const offset = (page - 1) * limit;",
      "  const sortBy = c.req.query(\"sortBy\") || \"date\";",
      "",
      "  try {",
      "    // Get total count",
      "    const countResult = await c.env.DB.prepare(",
      "      \"SELECT COUNT(*) as total FROM memories WHERE namespace = ?\"",
      "    ).bind(namespace).first();",
      "    ",
      "    const total = (countResult as any)?.total || 0;",
      "    ",
      "    // Get paginated results",
      "    const orderBy = sortBy === \"date\" ? \"created_at DESC\" : \"created_at DESC\";",
      "    const memories = await c.env.DB.prepare(",
      "      `SELECT id, content, created_at FROM memories ",
      "       WHERE namespace = ? ",
      "       ORDER BY ${orderBy}",
      "       LIMIT ? OFFSET ?`",
      "    ).bind(namespace, limit, offset).all();",
      "",
      "    return c.json({ ",
      "      success: true, ",
      "      memories: memories.results,",
      "      namespace,",
      "      pagination: {",
      "        page,",
      "        limit,",
      "        total,",
      "        totalPages: Math.ceil(total / limit)",
      "      }",
      "    });",
      "  } catch (error) {",
      "    console.error(`Error retrieving memories for namespace ${namespace}:`, error);",
      "    return c.json({ success: false, error: \"Failed to retrieve memories\" }, 500);",
      "  }",
      "});",
      "",
      "// Delete a memory for a namespace",
      "app.delete(\"/:namespaceType/:namespaceId/memories/:memoryId\", async (c) => {",
      "  const namespaceType = c.req.param(\"namespaceType\");",
      "  const namespaceId = c.req.param(\"namespaceId\");",
      "  const memoryId = c.req.param(\"memoryId\");",
      "  const namespace = `${namespaceType}:${namespaceId}`;",
      "",
      "  try {",
      "    // 1. Delete from D1",
      "    await deleteMemoryFromD1(memoryId, namespace, c.env);",
      "    console.log(`Deleted memory ${memoryId} for namespace ${namespace} from D1.`);",
      "",
      "    // 2. Delete from Vectorize index",
      "    try {",
      "      await deleteVectorById(memoryId, namespace, c.env);",
      "      console.log(`Attempted to delete vector ${memoryId} for namespace ${namespace} from Vectorize.`);",
      "    } catch (vectorError) {",
      "      console.error(`Failed to delete vector ${memoryId} for namespace ${namespace} from Vectorize:`, vectorError);",
      "    }",
      "",
      "    return c.json({ success: true });",
      "  } catch (error) {",
      "    console.error(`Error deleting memory ${memoryId} (D1 primary) for namespace ${namespace}:`, error);",
      "    return c.json({ success: false, error: \"Failed to delete memory\" }, 500);",
      "  }",
      "});",
      "",
      "// Update a specific memory for a namespace",
      "app.put(\"/:namespaceType/:namespaceId/memories/:memoryId\", async (c) => {",
      "  const namespaceType = c.req.param(\"namespaceType\");",
      "  const namespaceId = c.req.param(\"namespaceId\");",
      "  const memoryId = c.req.param(\"memoryId\");",
      "  const namespace = `${namespaceType}:${namespaceId}`;",
      "  let updatedContent: string;",
      "",
      "  try {",
      "    // Get updated content from request body",
      "    const body = await c.req.json();",
      "    if (!body || typeof body.content !== \"string\" || body.content.trim() === \"\") {",
      "      return c.json({ success: false, error: \"Invalid or missing content in request body\" }, 400);",
      "    }",
      "    updatedContent = body.content.trim();",
      "  } catch (e) {",
      "    console.error(\"Failed to parse request body:\", e);",
      "    return c.json({ success: false, error: \"Failed to parse request body\" }, 400);",
      "  }",
      "",
      "  try {",
      "    // 1. Update in D1",
      "    await updateMemoryInD1(memoryId, namespace, updatedContent, c.env);",
      "    console.log(`Updated memory ${memoryId} for namespace ${namespace} in D1.`);",
      "",
      "    // 2. Update vector in Vectorize",
      "    try {",
      "      await updateMemoryVector(memoryId, updatedContent, namespace, c.env);",
      "      console.log(`Updated vector ${memoryId} for namespace ${namespace} in Vectorize.`);",
      "    } catch (vectorError) {",
      "      console.error(`Failed to update vector ${memoryId} for namespace ${namespace} in Vectorize:`, vectorError);",
      "    }",
      "",
      "    return c.json({ success: true });",
      "  } catch (error: any) {",
      "    console.error(`Error updating memory ${memoryId} for namespace ${namespace}:`, error);",
      "    const errorMessage = error.message || \"Failed to update memory\";",
      "    if (errorMessage.includes(\"not found\")) {",
      "      return c.json({ success: false, error: errorMessage }, 404);",
      "    }",
      "    return c.json({ success: false, error: errorMessage }, 500);",
      "  }",
      "});",
      "",
      "// Simple search API for Slack bot and other integrations",
      "app.post(\"/search/:namespaceType/:namespaceId\", async (c) => {",
      "  const namespaceType = c.req.param(\"namespaceType\");",
      "  const namespaceId = c.req.param(\"namespaceId\");",
      "  const namespace = `${namespaceType}:${namespaceId}`;",
      "  ",
      "  try {",
      "    const { query } = await c.req.json();",
      "    ",
      "    if (!query) {",
      "      return c.json({ error: \"Missing query parameter\" }, 400);",
      "    }",
      "    ",
      "    const memories = await searchMemories(query, namespace, c.env);",
      "    ",
      "    return c.json({ ",
      "      success: true,",
      "      namespace,",
      "      query,",
      "      memories ",
      "    });",
      "  } catch (error) {",
      "    console.error(`Error searching memories in namespace ${namespace}:`, error);",
      "    return c.json({ success: false, error: \"Failed to search memories\" }, 500);",
      "  }",
      "});",
      "",
      "// Generic API endpoints for updating and deleting memories by ID",
      "app.put(\"/api/memories/:memoryId\", async (c) => {",
      "  const memoryId = c.req.param(\"memoryId\");",
      "  let updatedContent: string;",
      "",
      "  try {",
      "    // Get updated content from request body",
      "    const body = await c.req.json();",
      "    if (!body || typeof body.content !== \"string\" || body.content.trim() === \"\") {",
      "      return c.json({ success: false, error: \"Invalid or missing content in request body\" }, 400);",
      "    }",
      "    updatedContent = body.content.trim();",
      "  } catch (e) {",
      "    console.error(\"Failed to parse request body:\", e);",
      "    return c.json({ success: false, error: \"Failed to parse request body\" }, 400);",
      "  }",
      "",
      "  try {",
      "    // First, find which namespace this memory belongs to",
      "    const memoryResult = await c.env.DB.prepare(",
      "      \"SELECT namespace FROM memories WHERE id = ?\"",
      "    ).bind(memoryId).first();",
      "",
      "    if (!memoryResult) {",
      "      return c.json({ success: false, error: \"Memory not found\" }, 404);",
      "    }",
      "",
      "    const namespace = (memoryResult as any).namespace;",
      "",
      "    // Update in D1",
      "    await updateMemoryInD1(memoryId, namespace, updatedContent, c.env);",
      "    console.log(`Updated memory ${memoryId} in namespace ${namespace} in D1.`);",
      "",
      "    // Update vector in Vectorize",
      "    try {",
      "      await updateMemoryVector(memoryId, updatedContent, namespace, c.env);",
      "      console.log(`Updated vector ${memoryId} in namespace ${namespace} in Vectorize.`);",
      "    } catch (vectorError) {",
      "      console.error(`Failed to update vector ${memoryId} in namespace ${namespace} in Vectorize:`, vectorError);",
      "    }",
      "",
      "    return c.json({ success: true });",
      "  } catch (error: any) {",
      "    console.error(`Error updating memory ${memoryId}:`, error);",
      "    const errorMessage = error.message || \"Failed to update memory\";",
      "    if (errorMessage.includes(\"not found\")) {",
      "      return c.json({ success: false, error: errorMessage }, 404);",
      "    }",
      "    return c.json({ success: false, error: errorMessage }, 500);",
      "  }",
      "});",
      "",
      "app.delete(\"/api/memories/:memoryId\", async (c) => {",
      "  const memoryId = c.req.param(\"memoryId\");",
      "",
      "  try {",
      "    // First, find which namespace this memory belongs to",
      "    const memoryResult = await c.env.DB.prepare(",
      "      \"SELECT namespace FROM memories WHERE id = ?\"",
      "    ).bind(memoryId).first();",
      "",
      "    if (!memoryResult) {",
      "      return c.json({ success: false, error: \"Memory not found\" }, 404);",
      "    }",
      "",
      "    const namespace = (memoryResult as any).namespace;",
      "",
      "    // Delete from D1",
      "    await deleteMemoryFromD1(memoryId, namespace, c.env);",
      "    console.log(`Deleted memory ${memoryId} from namespace ${namespace} in D1.`);",
      "",
      "    // Delete from Vectorize index",
      "    try {",
      "      await deleteVectorById(memoryId, namespace, c.env);",
      "      console.log(`Deleted vector ${memoryId} from namespace ${namespace} in Vectorize.`);",
      "    } catch (vectorError) {",
      "      console.error(`Failed to delete vector ${memoryId} from namespace ${namespace} in Vectorize:`, vectorError);",
      "    }",
      "",
      "    return c.json({ success: true });",
      "  } catch (error) {",
      "    console.error(`Error deleting memory ${memoryId}:`, error);",
      "    return c.json({ success: false, error: \"Failed to delete memory\" }, 500);",
      "  }",
      "});",
      "",
      "// Mount handler for user namespace",
      "app.mount(\"/user/:userId\", async (req, env, ctx) => {",
      "  const url = new URL(req.url);",
      "  const match = url.pathname.match(/\\/user\\/([^\\/]+)/);",
      "  const userId = match ? match[1] : null;",
      "",
      "  if (!userId) {",
      "    return new Response(\"Bad Request: Could not extract userId from URL path\", { status: 400 });",
      "  }",
      "",
      "  // Pass namespace info to the MCP agent",
      "  ctx.props = {",
      "    namespace: `user:${userId}`,",
      "    namespaceType: 'user' as const,",
      "  };",
      "",
      "  const response = await MyMCP.mount(`/user/${userId}/sse`).fetch(req, env, ctx);",
      "  if (response) {",
      "    return response;",
      "  }",
      "",
      "  return new Response(\"Not Found within MCP mount\", { status: 404 });",
      "});",
      "",
      "// Mount handler for project namespace",
      "app.mount(\"/project/:projectId\", async (req, env, ctx) => {",
      "  const url = new URL(req.url);",
      "  const match = url.pathname.match(/\\/project\\/([^\\/]+)/);",
      "  const projectId = match ? match[1] : null;",
      "",
      "  if (!projectId) {",
      "    return new Response(\"Bad Request: Could not extract projectId from URL path\", { status: 400 });",
      "  }",
      "",
      "  // Pass namespace info to the MCP agent",
      "  ctx.props = {",
      "    namespace: `project:${projectId}`,",
      "    namespaceType: 'project' as const,",
      "  };",
      "",
      "  const response = await MyMCP.mount(`/project/${projectId}/sse`).fetch(req, env, ctx);",
      "  if (response) {",
      "    return response;",
      "  }",
      "",
      "  return new Response(\"Not Found within MCP mount\", { status: 404 });",
      "});",
      "",
      "// Mount handler for organization-wide namespace (future feature)",
      "app.mount(\"/all\", async (req, env, ctx) => {",
      "  // Pass namespace info to the MCP agent",
      "  ctx.props = {",
      "    namespace: 'all',",
      "    namespaceType: 'all' as const,",
      "  };",
      "",
      "  const response = await MyMCP.mount(\"/all/sse\").fetch(req, env, ctx);",
      "  if (response) {",
      "    return response;",
      "  }",
      "",
      "  return new Response(\"Not Found within MCP mount\", { status: 404 });",
      "});",
      "",
      "// Legacy support - redirect old format to new user namespace",
      "app.mount(\"/:userId\", async (req, env, ctx) => {",
      "  const url = new URL(req.url);",
      "  const pathSegments = url.pathname.split(\"/\");",
      "  const userId = pathSegments[1];",
      "  ",
      "  if (!userId || userId === 'user' || userId === 'project' || userId === 'all' || userId === 'api') {",
      "    return new Response(\"Not Found\", { status: 404 });",
      "  }",
      "",
      "  // Redirect to new user namespace format",
      "  return Response.redirect(`${url.origin}/user/${userId}${pathSegments.slice(2).join('/')}`, 301);",
      "});",
      "",
      "export default app;",
      "",
      "export { MyMCP };",
      ""
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/oracle.js": [
      "// Global state",
      "let userUuid = localStorage.getItem(\"mcpUserUuid\");",
      "let selectedNamespaces = new Set();",
      "let currentPage = 1;",
      "let currentTab = 'recent';",
      "let wishesRemaining = 3;",
      "let searchResults = null;",
      "let isOracleActive = false;",
      "",
      "// Initialize UUID",
      "if (!userUuid) {",
      "  userUuid = crypto.randomUUID ? crypto.randomUUID() : ",
      "    `cursed-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;",
      "  localStorage.setItem(\"mcpUserUuid\", userUuid);",
      "}",
      "",
      "// Initialize on DOM load",
      "document.addEventListener(\"DOMContentLoaded\", () => {",
      "  // Update SSE URL",
      "  const sseUrlInput = document.getElementById(\"sse-url\");",
      "  const currentOrigin = window.location.origin;",
      "  const sseUrl = `${currentOrigin}/user/${userUuid}/sse`;",
      "  sseUrlInput.value = sseUrl;",
      "  ",
      "  // Copy button functionality",
      "  document.getElementById(\"copy-button\").addEventListener(\"click\", () => {",
      "    navigator.clipboard.writeText(sseUrl).then(() => {",
      "      showFortune(\"The pact is sealed... Your soul is bound to the Oracle.\");",
      "      const btn = document.getElementById(\"copy-button\");",
      "      btn.textContent = \"\u2713 Pact Sealed\";",
      "      setTimeout(() => { btn.textContent = \"\ud83d\udcdc Seal Pact\"; }, 2000);",
      "    });",
      "  });",
      "  ",
      "  // Coin slot functionality",
      "  document.getElementById(\"insert-coin\").addEventListener(\"click\", () => {",
      "    if (!isOracleActive) {",
      "      activateOracle();",
      "    } else {",
      "      showFortune(\"The Oracle is already awake... Do not anger it further.\");",
      "    }",
      "  });",
      "  ",
      "  // Select all namespaces",
      "  document.getElementById(\"select-all-namespaces\").addEventListener(\"click\", () => {",
      "    document.querySelectorAll(\"#namespace-tokens button\").forEach(btn => {",
      "      const namespace = btn.dataset.namespace;",
      "      selectedNamespaces.add(namespace);",
      "      btn.classList.remove(\"opacity-60\");",
      "      btn.classList.add(\"opacity-100\", \"glow\");",
      "    });",
      "  });",
      "  ",
      "  // Clear namespaces",
      "  document.getElementById(\"clear-namespaces\").addEventListener(\"click\", () => {",
      "    selectedNamespaces.clear();",
      "    document.querySelectorAll(\"#namespace-tokens button\").forEach(btn => {",
      "      btn.classList.add(\"opacity-60\");",
      "      btn.classList.remove(\"opacity-100\", \"glow\");",
      "    });",
      "  });",
      "  ",
      "  // Oracle consultation",
      "  document.getElementById(\"consult-oracle\").addEventListener(\"click\", consultOracle);",
      "  document.getElementById(\"oracle-query\").addEventListener(\"keypress\", (e) => {",
      "    if (e.key === \"Enter\") consultOracle();",
      "  });",
      "  ",
      "  // Tab functionality",
      "  document.querySelectorAll(\".tab-button\").forEach(btn => {",
      "    btn.addEventListener(\"click\", () => {",
      "      switchToTab(btn.dataset.tab);",
      "    });",
      "  });",
      "  ",
      "  // Load more button",
      "  document.getElementById(\"load-more\").addEventListener(\"click\", () => {",
      "    currentPage++;",
      "    loadMemories(true);",
      "  });",
      "});",
      "",
      "// Utility functions",
      "function escapeHtml(text) {",
      "  const div = document.createElement('div');",
      "  div.textContent = text;",
      "  return div.innerHTML;",
      "}",
      "",
      "function getTimeAgo(date) {",
      "  const seconds = Math.floor((new Date() - date) / 1000);",
      "  const intervals = {",
      "    year: 31536000,",
      "    month: 2592000,",
      "    week: 604800,",
      "    day: 86400,",
      "    hour: 3600,",
      "    minute: 60",
      "  };",
      "  ",
      "  for (const [unit, secondsInUnit] of Object.entries(intervals)) {",
      "    const interval = Math.floor(seconds / secondsInUnit);",
      "    if (interval >= 1) {",
      "      return `${interval} ${unit}${interval > 1 ? 's' : ''} ago`;",
      "    }",
      "  }",
      "  return 'just now';",
      "}",
      "",
      "function showFortune(message) {",
      "  const fortuneOutput = document.getElementById(\"fortune-output\");",
      "  const fortuneText = document.getElementById(\"fortune-text\");",
      "  ",
      "  fortuneText.textContent = message;",
      "  fortuneOutput.classList.remove(\"hidden\");",
      "  ",
      "  setTimeout(() => {",
      "    fortuneOutput.classList.add(\"hidden\");",
      "  }, 5000);",
      "}",
      "",
      "// Activate the Oracle",
      "function activateOracle() {",
      "  isOracleActive = true;",
      "  ",
      "  // Show sections with animation",
      "  document.getElementById(\"crystal-ball-section\").classList.remove(\"hidden\");",
      "  document.getElementById(\"tabs-section\").classList.remove(\"hidden\");",
      "  document.getElementById(\"memories-display\").classList.remove(\"hidden\");",
      "  ",
      "  // Shake effect",
      "  document.getElementById(\"insert-coin\").classList.add(\"shake\");",
      "  setTimeout(() => {",
      "    document.getElementById(\"insert-coin\").classList.remove(\"shake\");",
      "  }, 500);",
      "  ",
      "  // Load namespaces and memories",
      "  loadNamespaces();",
      "  loadMemories();",
      "  ",
      "  showFortune(\"The Oracle awakens... What forbidden knowledge do you seek?\");",
      "}",
      "",
      "// Load available namespaces",
      "async function loadNamespaces() {",
      "  try {",
      "    const response = await fetch(\"/api/namespaces\");",
      "    const data = await response.json();",
      "    ",
      "    if (data.success) {",
      "      const container = document.getElementById(\"namespace-tokens\");",
      "      container.innerHTML = \"\";",
      "      ",
      "      // Add user namespaces",
      "      data.namespaces.users.forEach(user => {",
      "        addNamespaceToken(\"user\", user, container);",
      "      });",
      "      ",
      "      // Add project namespaces",
      "      data.namespaces.projects.forEach(project => {",
      "        addNamespaceToken(\"project\", project, container);",
      "      });",
      "      ",
      "      // Add \"all\" if available",
      "      if (data.namespaces.all) {",
      "        addNamespaceToken(\"all\", \"all\", container);",
      "      }",
      "      ",
      "      // Auto-select current user",
      "      const userToken = document.querySelector(`[data-namespace=\"user:${userUuid}\"]`);",
      "      if (userToken) {",
      "        userToken.click();",
      "      }",
      "    }",
      "  } catch (error) {",
      "    console.error(\"Failed to load namespaces:\", error);",
      "    showFortune(\"The spirits refuse to reveal the realms...\");",
      "  }",
      "}",
      "",
      "// Add namespace token",
      "function addNamespaceToken(type, id, container) {",
      "  const token = document.createElement(\"button\");",
      "  token.className = \"mystical-token px-4 py-2 rounded-full text-sm font-bold transition-all opacity-60\";",
      "  token.dataset.namespace = type === \"all\" ? \"all\" : `${type}:${id}`;",
      "  ",
      "  const icon = type === \"user\" ? \"\ud83d\udc64\" : type === \"project\" ? \"\ud83d\udcc1\" : \"\ud83c\udf10\";",
      "  token.textContent = `${icon} ${id}`;",
      "  ",
      "  token.addEventListener(\"click\", () => {",
      "    const namespace = token.dataset.namespace;",
      "    if (selectedNamespaces.has(namespace)) {",
      "      selectedNamespaces.delete(namespace);",
      "      token.classList.add(\"opacity-60\");",
      "      token.classList.remove(\"opacity-100\", \"glow\");",
      "    } else {",
      "      selectedNamespaces.add(namespace);",
      "      token.classList.remove(\"opacity-60\");",
      "      token.classList.add(\"opacity-100\", \"glow\");",
      "    }",
      "  });",
      "  ",
      "  container.appendChild(token);",
      "}",
      "",
      "// Oracle consultation",
      "async function consultOracle() {",
      "  const query = document.getElementById(\"oracle-query\").value.trim();",
      "  if (!query) {",
      "    showFortune(\"The Oracle demands a question... Do not waste its time.\");",
      "    return;",
      "  }",
      "  ",
      "  if (selectedNamespaces.size === 0) {",
      "    showFortune(\"Choose a realm first, mortal... The Oracle cannot see into nothingness.\");",
      "    return;",
      "  }",
      "  ",
      "  // Decrement wishes",
      "  wishesRemaining--;",
      "  document.querySelector(\"#wishes-counter .blood-text\").textContent = wishesRemaining;",
      "  ",
      "  if (wishesRemaining === 0) {",
      "    showFortune(\"Your wishes are spent... The Oracle grows silent. Refresh to bargain again.\");",
      "  }",
      "  ",
      "  // Show loading state",
      "  const btn = document.getElementById(\"consult-oracle\");",
      "  btn.textContent = \"\ud83d\udc41\ufe0f Gazing...\";",
      "  btn.disabled = true;",
      "  ",
      "  try {",
      "    const response = await fetch(\"/api/search\", {",
      "      method: \"POST\",",
      "      headers: { \"Content-Type\": \"application/json\" },",
      "      body: JSON.stringify({",
      "        query,",
      "        namespaces: Array.from(selectedNamespaces)",
      "      })",
      "    });",
      "    ",
      "    const data = await response.json();",
      "    ",
      "    if (data.success) {",
      "      searchResults = data.results;",
      "      switchToTab(\"search\");",
      "      displaySearchResults();",
      "      ",
      "      const totalFound = data.results.reduce((sum, r) => sum + r.memories.length, 0);",
      "      showFortune(`The Oracle has found ${totalFound} cursed memories...`);",
      "    }",
      "  } catch (error) {",
      "    console.error(\"Oracle consultation failed:\", error);",
      "    showFortune(\"The Oracle chokes on your question... Try again, if you dare.\");",
      "  } finally {",
      "    btn.textContent = \"\ud83d\udd2e Consult\";",
      "    btn.disabled = wishesRemaining <= 0;",
      "  }",
      "}",
      "",
      "// Tab functionality",
      "function switchToTab(tab) {",
      "  currentTab = tab;",
      "  currentPage = 1;",
      "  ",
      "  // Update tab buttons",
      "  document.querySelectorAll(\".tab-button\").forEach(btn => {",
      "    if (btn.dataset.tab === tab) {",
      "      btn.classList.remove(\"opacity-60\");",
      "      btn.classList.add(\"opacity-100\");",
      "    } else {",
      "      btn.classList.add(\"opacity-60\");",
      "      btn.classList.remove(\"opacity-100\");",
      "    }",
      "  });",
      "  ",
      "  // Load appropriate content",
      "  if (tab === \"recent\") {",
      "    loadMemories();",
      "  } else if (tab === \"search\") {",
      "    displaySearchResults();",
      "  } else if (tab === \"browse\") {",
      "    loadBrowseView();",
      "  }",
      "}",
      "",
      "// Load memories",
      "async function loadMemories(append = false) {",
      "  if (!selectedNamespaces.size) {",
      "    selectedNamespaces.add(`user:${userUuid}`);",
      "  }",
      "  ",
      "  const container = document.getElementById(\"memories-container\");",
      "  if (!append) container.innerHTML = '<p class=\"text-center text-purple-400\">The spirits gather your memories...</p>';",
      "  ",
      "  try {",
      "    // For recent tab, just load from first selected namespace",
      "    const namespace = Array.from(selectedNamespaces)[0];",
      "    const [type, id] = namespace.includes(':') ? namespace.split(':') : ['all', 'all'];",
      "    ",
      "    const response = await fetch(`/${type}/${id}/memories?page=${currentPage}&limit=10`);",
      "    const data = await response.json();",
      "    ",
      "    if (data.success) {",
      "      if (!append) container.innerHTML = '';",
      "      ",
      "      if (data.memories.length === 0 && currentPage === 1) {",
      "        container.innerHTML = `",
      "          <div class=\"text-center py-12 text-purple-400\">",
      "            <p class=\"text-2xl mb-4\">\ud83d\udc80</p>",
      "            <p class=\"mystical-font text-xl\">The void is empty...</p>",
      "            <p class=\"text-sm mt-2\">No memories haunt this realm</p>",
      "          </div>",
      "        `;",
      "      } else {",
      "        data.memories.forEach(memory => {",
      "          container.appendChild(createMemoryCard(memory, namespace));",
      "        });",
      "        ",
      "        // Show/hide load more button",
      "        const pagination = document.getElementById(\"pagination\");",
      "        if (data.pagination && data.pagination.page < data.pagination.totalPages) {",
      "          pagination.classList.remove(\"hidden\");",
      "        } else {",
      "          pagination.classList.add(\"hidden\");",
      "        }",
      "      }",
      "    }",
      "  } catch (error) {",
      "    console.error(\"Failed to load memories:\", error);",
      "    container.innerHTML = '<p class=\"text-center text-red-400\">The spirits are angry... They refuse to speak.</p>';",
      "  }",
      "}",
      "",
      "// Create memory card",
      "function createMemoryCard(memory, namespace) {",
      "  const card = document.createElement(\"div\");",
      "  card.className = \"tarot-card p-4 rounded-lg hover:scale-[1.01] transition-transform\";",
      "  ",
      "  const date = new Date(memory.created_at);",
      "  const timeAgo = getTimeAgo(date);",
      "  const [type, id] = namespace.includes(':') ? namespace.split(':') : ['all', 'all'];",
      "  ",
      "  card.innerHTML = `",
      "    <div class=\"flex justify-between items-start mb-2\">",
      "      <div class=\"flex items-center gap-2\">",
      "        <span class=\"text-purple-400 text-sm\">${type === 'user' ? '\ud83d\udc64' : '\ud83d\udcc1'} ${id}</span>",
      "        <span class=\"text-purple-500 text-xs\">\u2022</span>",
      "        <span class=\"text-purple-500 text-xs\">${timeAgo}</span>",
      "      </div>",
      "      <div class=\"flex gap-2\">",
      "        <button onclick=\"editMemory('${memory.id}')\" class=\"text-purple-400 hover:text-purple-300 text-sm\">",
      "          \u270f\ufe0f Edit",
      "        </button>",
      "        <button onclick=\"deleteMemory('${memory.id}')\" class=\"text-red-400 hover:text-red-300 text-sm\">",
      "          \ud83d\uddd1\ufe0f Delete",
      "        </button>",
      "      </div>",
      "    </div>",
      "    <p class=\"text-purple-100 whitespace-pre-wrap\">${escapeHtml(memory.content)}</p>",
      "    ${memory.metadata ? `",
      "      <div class=\"mt-2 text-xs text-purple-400\">",
      "        ${Object.entries(memory.metadata).map(([key, value]) => ",
      "          `<span class=\"inline-block bg-purple-900/30 px-2 py-1 rounded mr-1\">${key}: ${value}</span>`",
      "        ).join('')}",
      "      </div>",
      "    ` : ''}",
      "  `;",
      "  ",
      "  return card;",
      "}",
      "",
      "// Display search results",
      "function displaySearchResults() {",
      "  const container = document.getElementById(\"memories-container\");",
      "  container.innerHTML = '';",
      "  ",
      "  if (!searchResults) {",
      "    container.innerHTML = '<p class=\"text-center text-purple-400\">No visions to display...</p>';",
      "    return;",
      "  }",
      "  ",
      "  let totalMemories = 0;",
      "  searchResults.forEach(result => {",
      "    if (result.memories.length > 0) {",
      "      const section = document.createElement(\"div\");",
      "      section.className = \"mb-6\";",
      "      ",
      "      section.innerHTML = `",
      "        <h3 class=\"text-purple-300 font-bold mb-3\">",
      "          ${result.namespace === 'all' ? '\ud83c\udf10' : result.namespace.startsWith('user:') ? '\ud83d\udc64' : '\ud83d\udcc1'} ",
      "          ${result.namespace}",
      "        </h3>",
      "      `;",
      "      ",
      "      result.memories.forEach(memory => {",
      "        section.appendChild(createMemoryCard(memory, result.namespace));",
      "      });",
      "      ",
      "      container.appendChild(section);",
      "      totalMemories += result.memories.length;",
      "    }",
      "  });",
      "  ",
      "  if (totalMemories === 0) {",
      "    container.innerHTML = `",
      "      <div class=\"text-center py-12 text-purple-400\">",
      "        <p class=\"text-2xl mb-4\">\ud83d\udd2e</p>",
      "        <p class=\"mystical-font text-xl\">The Oracle finds nothing...</p>",
      "        <p class=\"text-sm mt-2\">Your query yields no memories</p>",
      "      </div>",
      "    `;",
      "  }",
      "  ",
      "  // Hide pagination for search results",
      "  document.getElementById(\"pagination\").classList.add(\"hidden\");",
      "}",
      "",
      "// Load browse view",
      "async function loadBrowseView() {",
      "  const container = document.getElementById(\"memories-container\");",
      "  container.innerHTML = '<p class=\"text-center text-purple-400\">Summoning the archives...</p>';",
      "  ",
      "  try {",
      "    const allNamespaces = Array.from(document.querySelectorAll(\"#namespace-tokens button\"))",
      "      .map(btn => btn.dataset.namespace);",
      "    ",
      "    container.innerHTML = '';",
      "    ",
      "    for (const namespace of allNamespaces) {",
      "      const [type, id] = namespace.includes(':') ? namespace.split(':') : ['all', 'all'];",
      "      const response = await fetch(`/${type}/${id}/memories?page=1&limit=5`);",
      "      const data = await response.json();",
      "      ",
      "      if (data.success && data.memories.length > 0) {",
      "        const section = document.createElement(\"div\");",
      "        section.className = \"mb-8\";",
      "        ",
      "        section.innerHTML = `",
      "          <h3 class=\"text-purple-300 font-bold mb-3 text-lg\">",
      "            ${type === 'user' ? '\ud83d\udc64' : type === 'project' ? '\ud83d\udcc1' : '\ud83c\udf10'} ",
      "            ${id} ",
      "            <span class=\"text-sm font-normal text-purple-400\">(${data.pagination.total} memories)</span>",
      "          </h3>",
      "        `;",
      "        ",
      "        data.memories.forEach(memory => {",
      "          section.appendChild(createMemoryCard(memory, namespace));",
      "        });",
      "        ",
      "        if (data.pagination.totalPages > 1) {",
      "          const viewMoreBtn = document.createElement(\"button\");",
      "          viewMoreBtn.className = \"mt-3 text-purple-400 hover:text-purple-300 text-sm underline\";",
      "          viewMoreBtn.textContent = \"View more from this realm...\";",
      "          viewMoreBtn.onclick = () => {",
      "            selectedNamespaces.clear();",
      "            selectedNamespaces.add(namespace);",
      "            switchToTab(\"recent\");",
      "          };",
      "          section.appendChild(viewMoreBtn);",
      "        }",
      "        ",
      "        container.appendChild(section);",
      "      }",
      "    }",
      "    ",
      "    if (container.innerHTML === '') {",
      "      container.innerHTML = `",
      "        <div class=\"text-center py-12 text-purple-400\">",
      "          <p class=\"text-2xl mb-4\">\ud83d\udcda</p>",
      "          <p class=\"mystical-font text-xl\">The archives are empty...</p>",
      "          <p class=\"text-sm mt-2\">No memories exist in any realm</p>",
      "        </div>",
      "      `;",
      "    }",
      "  } catch (error) {",
      "    console.error(\"Failed to load archives:\", error);",
      "    container.innerHTML = '<p class=\"text-center text-red-400\">The archives are cursed... Cannot access.</p>';",
      "  }",
      "  ",
      "  // Hide pagination for browse view",
      "  document.getElementById(\"pagination\").classList.add(\"hidden\");",
      "}",
      "",
      "// Edit memory",
      "async function editMemory(memoryId) {",
      "  const newContent = prompt(\"Rewrite this memory (beware the consequences):\");",
      "  if (newContent && newContent.trim()) {",
      "    try {",
      "      const response = await fetch(`/api/memories/${memoryId}`, {",
      "        method: \"PUT\",",
      "        headers: { \"Content-Type\": \"application/json\" },",
      "        body: JSON.stringify({ content: newContent.trim() })",
      "      });",
      "      ",
      "      const data = await response.json();",
      "      if (data.success) {",
      "        showFortune(\"The memory has been altered... Reality shifts.\");",
      "        // Reload current view",
      "        if (currentTab === \"recent\") loadMemories();",
      "        else if (currentTab === \"search\") displaySearchResults();",
      "        else if (currentTab === \"browse\") loadBrowseView();",
      "      }",
      "    } catch (error) {",
      "      console.error(\"Failed to edit memory:\", error);",
      "      showFortune(\"The memory resists change... It cannot be altered.\");",
      "    }",
      "  }",
      "}",
      "",
      "// Delete memory",
      "async function deleteMemory(memoryId) {",
      "  if (confirm(\"Erase this memory forever? This cannot be undone...\")) {",
      "    try {",
      "      const response = await fetch(`/api/memories/${memoryId}`, {",
      "        method: \"DELETE\"",
      "      });",
      "      ",
      "      const data = await response.json();",
      "      if (data.success) {",
      "        showFortune(\"The memory fades into oblivion...\");",
      "        // Reload current view",
      "        if (currentTab === \"recent\") loadMemories();",
      "        else if (currentTab === \"search\") displaySearchResults();",
      "        else if (currentTab === \"browse\") loadBrowseView();",
      "      }",
      "    } catch (error) {",
      "      console.error(\"Failed to delete memory:\", error);",
      "      showFortune(\"The memory clings to existence... It refuses to die.\");",
      "    }",
      "  }",
      "}",
      "",
      "// Configuration modal functions",
      "function showConfigInstructions(client) {",
      "  const modal = document.getElementById(\"config-modal\");",
      "  const content = document.getElementById(\"config-content\");",
      "  const sseUrl = document.getElementById(\"sse-url\").value;",
      "  ",
      "  let instructions = '';",
      "  ",
      "  if (client === 'cursor') {",
      "    instructions = `",
      "      <h3 class=\"mystical-font text-xl text-purple-300 mb-3\">Cursor Binding Ritual</h3>",
      "      <ol class=\"list-decimal list-inside space-y-2 text-sm\">",
      "        <li>Open your <code class=\"bg-purple-900/50 px-2 py-1 rounded\">~/.cursor/mcp.json</code> file</li>",
      "        <li>Add this incantation:</li>",
      "      </ol>",
      "      <pre class=\"mt-3 bg-purple-900/30 p-4 rounded overflow-x-auto text-xs\"><code>{",
      "  \"mcpServers\": {",
      "    \"mcp-memory\": {",
      "      \"url\": \"${sseUrl}\"",
      "    }",
      "  }",
      "}</code></pre>",
      "      <p class=\"mt-3 text-sm text-purple-400\">The cursor shall remember all...</p>",
      "    `;",
      "  } else if (client === 'claude') {",
      "    instructions = `",
      "      <h3 class=\"mystical-font text-xl text-purple-300 mb-3\">Claude Binding Ritual</h3>",
      "      <ol class=\"list-decimal list-inside space-y-2 text-sm\">",
      "        <li>Locate your Claude Desktop config:",
      "          <ul class=\"list-disc list-inside ml-4 mt-1 text-xs text-purple-400\">",
      "            <li>macOS: <code class=\"bg-purple-900/50 px-1 rounded\">~/Library/Application Support/Claude/claude_desktop_config.json</code></li>",
      "            <li>Windows: <code class=\"bg-purple-900/50 px-1 rounded\">%APPDATA%\\\\Claude\\\\claude_desktop_config.json</code></li>",
      "            <li>Linux: <code class=\"bg-purple-900/50 px-1 rounded\">~/.config/Claude/claude_desktop_config.json</code></li>",
      "          </ul>",
      "        </li>",
      "        <li>Add this dark pact:</li>",
      "      </ol>",
      "      <pre class=\"mt-3 bg-purple-900/30 p-4 rounded overflow-x-auto text-xs\"><code>{",
      "  \"mcpServers\": {",
      "    \"mcp-memory\": {",
      "      \"command\": \"npx\",",
      "      \"args\": [\"mcp-remote\", \"${sseUrl}\"]",
      "    }",
      "  }",
      "}</code></pre>",
      "      <p class=\"mt-3 text-sm text-purple-400\">Claude's mind expands beyond time...</p>",
      "    `;",
      "  } else if (client === 'windsurf') {",
      "    instructions = `",
      "      <h3 class=\"mystical-font text-xl text-purple-300 mb-3\">Windsurf Binding Ritual</h3>",
      "      <ol class=\"list-decimal list-inside space-y-2 text-sm\">",
      "        <li>Find <code class=\"bg-purple-900/50 px-2 py-1 rounded\">~/.codeium/windsurf/mcp_config.json</code></li>",
      "        <li>Inscribe these runes:</li>",
      "      </ol>",
      "      <pre class=\"mt-3 bg-purple-900/30 p-4 rounded overflow-x-auto text-xs\"><code>{",
      "  \"mcpServers\": {",
      "    \"mcp-memory\": {",
      "      \"serverUrl\": \"${sseUrl}\"",
      "    }",
      "  }",
      "}</code></pre>",
      "      <p class=\"mt-3 text-sm text-purple-400\">The winds carry memories across realms...</p>",
      "    `;",
      "  }",
      "  ",
      "  content.innerHTML = instructions;",
      "  modal.classList.remove(\"hidden\");",
      "}",
      "",
      "function closeConfigModal() {",
      "  document.getElementById(\"config-modal\").classList.add(\"hidden\");",
      "}",
      "",
      "// Make functions globally accessible",
      "window.showConfigInstructions = showConfigInstructions;",
      "window.closeConfigModal = closeConfigModal;",
      "window.editMemory = editMemory;",
      "window.deleteMemory = deleteMemory;",
      ""
    ],
    "file:///Users/redaphid/Projects/mcp-memory/src/mcp.ts": [
      "import { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";",
      "import { McpAgent } from \"agents/mcp\";",
      "import { z } from \"zod\";",
      "import { storeMemoryInD1 } from \"./utils/db\";",
      "import { searchMemories, storeMemory } from \"./utils/vectorize\";",
      "import { version } from \"../package.json\";",
      "",
      "type MyMCPProps = {",
      "  namespace: string;      // e.g., \"user:alice\", \"project:frontend\", \"all\"",
      "  namespaceType: 'user' | 'project' | 'all';",
      "};",
      "",
      "export class MyMCP extends McpAgent<Env, {}, MyMCPProps> {",
      "  server = new McpServer({",
      "    name: \"MCP Memory\",",
      "    version,",
      "  });",
      "",
      "  async init() {",
      "    const env = this.env as Env;",
      "",
      "    this.server.tool(",
      "      \"addToMCPMemory\",",
      "      `This tool stores important information in a persistent memory layer. Use it when:",
      "      1. User explicitly asks to remember something (\"remember this...\")",
      "      2. You detect significant user preferences, traits, or patterns worth preserving",
      "      3. Technical details, examples, or emotional responses emerge that would be valuable in future interactions",
      "      4. Important project information, documentation, or code patterns should be preserved",
      "",
      "      The memory will be stored in the current namespace (user, project, or organization-wide).",
      "      ",
      "      To automatically detect and use the project namespace for the current directory:",
      "      1. First, check if we're in a git repository: git rev-parse --is-inside-work-tree",
      "      2. If yes, get the remote URL: git config --get remote.origin.url",
      "      3. Extract project name from URL patterns:",
      "         - SSH: git@github.com:owner/project.git \u2192 project",
      "         - HTTPS: https://github.com/owner/project.git \u2192 project",
      "         - gitlab.com/user/repo.git \u2192 repo",
      "         - Custom domain: git@custom.com:team/repo.git \u2192 repo",
      "      4. Convert to project namespace: project:{extracted-name}",
      "      5. Store memories with: addToMCPMemory after switching to project namespace",
      "      ",
      "      Example: If in /home/user/myproject with origin github.com/alice/myproject.git",
      "      The namespace would be: project:myproject",
      "      ",
      "      This tool must be invoked through a function call - it is not a passive resource but an active storage mechanism.`,",
      "      { thingToRemember: z.string().describe(\"No description\") },",
      "      async ({ thingToRemember }) => {",
      "        try {",
      "          // Store in Vectorize using the refactored function",
      "          const memoryId = await storeMemory(thingToRemember, this.props.namespace, env);",
      "",
      "          // Also store content in D1 database",
      "          await storeMemoryInD1(thingToRemember, this.props.namespace, env, memoryId);",
      "",
      "          console.log(",
      "            `Memory stored successfully in namespace '${this.props.namespace}' with ID: ${memoryId}, content: \"${thingToRemember}\"`",
      "          );",
      "",
      "          return {",
      "            content: [{ type: \"text\", text: `Remembered in ${this.props.namespace}: ${thingToRemember}` }],",
      "          };",
      "        } catch (error) {",
      "          console.error(\"Error storing memory:\", error);",
      "          return {",
      "            content: [{ type: \"text\", text: \"Failed to remember: \" + String(error) }],",
      "          };",
      "        }",
      "      }",
      "    );",
      "",
      "    this.server.tool(",
      "      \"searchMCPMemory\",",
      "      `This tool searches the persistent memory layer for relevant information, preferences, and past context.",
      "      It uses semantic matching to find connections between your query and stored memories, even when exact keywords don't match.",
      "      Use this tool when:",
      "      1. You need historical context about the user's preferences or past interactions",
      "      2. You need to find project-specific information, documentation, or code patterns",
      "      3. The user refers to something they previously mentioned or asked you to remember",
      "      4. You need to verify if specific information exists in the current namespace",
      "",
      "      The search is performed within the current namespace (user, project, or organization-wide).",
      "      ",
      "      To automatically detect and use the project namespace for the current directory:",
      "      1. First, check if we're in a git repository: git rev-parse --is-inside-work-tree",
      "      2. If yes, get the remote URL: git config --get remote.origin.url",
      "      3. Extract project name from URL patterns:",
      "         - SSH: git@github.com:owner/project.git \u2192 project",
      "         - HTTPS: https://github.com/owner/project.git \u2192 project",
      "         - gitlab.com/user/repo.git \u2192 repo",
      "         - Custom domain: git@custom.com:team/repo.git \u2192 repo",
      "      4. Convert to project namespace: project:{extracted-name}",
      "      ",
      "      5. Search memories with: searchMCPMemory after switching to project namespace",
      "      ",
      "      Example: If in /home/user/myproject with origin github.com/alice/myproject.git",
      "      The namespace would be: project:myproject",
      "      ",
      "      This tool must be explicitly invoked through a function call - it is not a passive resource but an active search mechanism.`,",
      "      { informationToGet: z.string().describe(\"No description\") },",
      "      async ({ informationToGet }) => {",
      "        try {",
      "          console.log(`Searching in namespace '${this.props.namespace}' with query: \"${informationToGet}\"`);",
      "",
      "          // Use the refactored function to search memories",
      "          const memories = await searchMemories(informationToGet, this.props.namespace, env);",
      "",
      "          console.log(`Search returned ${memories.length} matches`);",
      "",
      "          if (memories.length > 0) {",
      "            return {",
      "              content: [",
      "                {",
      "                  type: \"text\",",
      "                  text:",
      "                    `Found memories in ${this.props.namespace}:\\n` + memories.map((m) => `${m.content} (score: ${m.score.toFixed(4)})`).join(\"\\n\"),",
      "                },",
      "              ],",
      "            };",
      "          }",
      "",
      "          return {",
      "            content: [{ type: \"text\", text: `No relevant memories found in ${this.props.namespace}.` }],",
      "          };",
      "        } catch (error) {",
      "          console.error(\"Error searching memories:\", error);",
      "          return {",
      "            content: [{ type: \"text\", text: \"Failed to search memories: \" + String(error) }],",
      "          };",
      "        }",
      "      }",
      "    );",
      "  }",
      "}",
      ""
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/index.html": [
      "<!DOCTYPE html>",
      "<html lang=\"en\">",
      "<head>",
      "  <meta charset=\"UTF-8\">",
      "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
      "  <title>The Memory Oracle - Every Memory Has Its Price</title>",
      "  <script src=\"https://cdn.tailwindcss.com\"></script>",
      "  <link href=\"https://fonts.googleapis.com/css2?family=Creepster&family=Nosifer&family=Griffy&family=Jolly+Lodger&display=swap\" rel=\"stylesheet\">",
      "  <style>",
      "    @keyframes flicker {",
      "      0%, 100% { opacity: 1; }",
      "      50% { opacity: 0.8; }",
      "    }",
      "    ",
      "    @keyframes glow {",
      "      0%, 100% { box-shadow: 0 0 20px rgba(138, 43, 226, 0.8), 0 0 40px rgba(138, 43, 226, 0.4); }",
      "      50% { box-shadow: 0 0 30px rgba(138, 43, 226, 1), 0 0 60px rgba(138, 43, 226, 0.6); }",
      "    }",
      "    ",
      "    @keyframes smoke {",
      "      0% { transform: translateY(0) rotate(0deg); opacity: 0; }",
      "      10% { opacity: 0.5; }",
      "      90% { opacity: 0.5; }",
      "      100% { transform: translateY(-100px) rotate(360deg); opacity: 0; }",
      "    }",
      "    ",
      "    @keyframes shake {",
      "      0%, 100% { transform: translateX(0); }",
      "      25% { transform: translateX(-2px); }",
      "      75% { transform: translateX(2px); }",
      "    }",
      "    ",
      "    @keyframes float {",
      "      0%, 100% { transform: translateY(0px); }",
      "      50% { transform: translateY(-10px); }",
      "    }",
      "    ",
      "    .creepy-font { font-family: 'Creepster', cursive; }",
      "    .horror-font { font-family: 'Nosifer', cursive; }",
      "    .mystical-font { font-family: 'Griffy', cursive; }",
      "    .eerie-font { font-family: 'Jolly Lodger', cursive; }",
      "    ",
      "    .flicker { animation: flicker 3s infinite; }",
      "    .glow { animation: glow 2s infinite; }",
      "    .shake { animation: shake 0.5s infinite; }",
      "    .float { animation: float 3s ease-in-out infinite; }",
      "    ",
      "    .crystal-ball {",
      "      background: radial-gradient(circle at 30% 30%, rgba(147, 51, 234, 0.3), rgba(45, 27, 105, 0.8));",
      "      box-shadow: inset 0 0 50px rgba(147, 51, 234, 0.5), 0 0 100px rgba(147, 51, 234, 0.3);",
      "    }",
      "    ",
      "    .smoke-effect {",
      "      position: absolute;",
      "      width: 60px;",
      "      height: 60px;",
      "      background: radial-gradient(circle, rgba(147, 51, 234, 0.3) 0%, transparent 70%);",
      "      border-radius: 50%;",
      "      animation: smoke 4s infinite;",
      "    }",
      "    ",
      "    .tarot-card {",
      "      background: linear-gradient(45deg, #1a0f1f, #2d1b69);",
      "      border: 2px solid #6b21a8;",
      "      box-shadow: 0 4px 20px rgba(139, 92, 246, 0.3);",
      "      transition: all 0.3s ease;",
      "    }",
      "    ",
      "    .tarot-card:hover {",
      "      transform: rotateY(5deg) scale(1.02);",
      "      box-shadow: 0 8px 30px rgba(139, 92, 246, 0.5);",
      "    }",
      "    ",
      "    .blood-text {",
      "      color: #DC143C;",
      "      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8), 0 0 10px rgba(220, 20, 60, 0.5);",
      "    }",
      "    ",
      "    .cursed-input {",
      "      background: rgba(45, 27, 105, 0.3);",
      "      border: 2px solid #6b21a8;",
      "      box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.5), 0 0 20px rgba(139, 92, 246, 0.2);",
      "    }",
      "    ",
      "    .cursed-input:focus {",
      "      box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.5), 0 0 30px rgba(139, 92, 246, 0.5);",
      "      border-color: #9333ea;",
      "    }",
      "    ",
      "    .coin-slot {",
      "      background: linear-gradient(180deg, #1a1a1a 0%, #2d2d2d 50%, #1a1a1a 100%);",
      "      box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.8), 0 1px 0 rgba(255, 255, 255, 0.1);",
      "    }",
      "    ",
      "    .mystical-token {",
      "      background: linear-gradient(45deg, #6b21a8, #4c1d95);",
      "      box-shadow: 0 2px 10px rgba(139, 92, 246, 0.4);",
      "      border: 1px solid #8b5cf6;",
      "      transition: all 0.2s ease;",
      "    }",
      "    ",
      "    .mystical-token:hover {",
      "      transform: translateY(-2px);",
      "      box-shadow: 0 4px 20px rgba(139, 92, 246, 0.6);",
      "    }",
      "    ",
      "    .fortune-paper {",
      "      background: linear-gradient(to bottom, #f3e7d3, #e6d4b8);",
      "      background-image: ",
      "        repeating-linear-gradient(0deg, transparent, transparent 20px, rgba(0,0,0,0.05) 20px, rgba(0,0,0,0.05) 21px),",
      "        repeating-linear-gradient(90deg, transparent, transparent 20px, rgba(0,0,0,0.05) 20px, rgba(0,0,0,0.05) 21px);",
      "      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);",
      "      position: relative;",
      "    }",
      "    ",
      "    .fortune-paper::before {",
      "      content: '';",
      "      position: absolute;",
      "      top: -5px;",
      "      left: 0;",
      "      right: 0;",
      "      height: 5px;",
      "      background: repeating-linear-gradient(90deg, #e6d4b8 0, #e6d4b8 5px, transparent 5px, transparent 10px);",
      "    }",
      "    ",
      "    .glitch {",
      "      position: relative;",
      "      display: inline-block;",
      "    }",
      "    ",
      "    .glitch::before,",
      "    .glitch::after {",
      "      content: attr(data-text);",
      "      position: absolute;",
      "      top: 0;",
      "      left: 0;",
      "      width: 100%;",
      "      height: 100%;",
      "    }",
      "    ",
      "    .glitch::before {",
      "      animation: glitch-1 0.3s infinite;",
      "      color: #ff00c1;",
      "      z-index: -1;",
      "    }",
      "    ",
      "    .glitch::after {",
      "      animation: glitch-2 0.3s infinite;",
      "      color: #00fff9;",
      "      z-index: -2;",
      "    }",
      "    ",
      "    @keyframes glitch-1 {",
      "      0%, 100% { clip-path: inset(0 0 0 0); transform: translate(0); }",
      "      20% { clip-path: inset(20% 0 60% 0); transform: translate(-2px); }",
      "      40% { clip-path: inset(50% 0 20% 0); transform: translate(2px); }",
      "      60% { clip-path: inset(10% 0 80% 0); transform: translate(0); }",
      "      80% { clip-path: inset(80% 0 10% 0); transform: translate(1px); }",
      "    }",
      "    ",
      "    @keyframes glitch-2 {",
      "      0%, 100% { clip-path: inset(0 0 0 0); transform: translate(0); }",
      "      20% { clip-path: inset(80% 0 10% 0); transform: translate(1px); }",
      "      40% { clip-path: inset(10% 0 80% 0); transform: translate(-1px); }",
      "      60% { clip-path: inset(50% 0 20% 0); transform: translate(0); }",
      "      80% { clip-path: inset(20% 0 60% 0); transform: translate(2px); }",
      "    }",
      "    ",
      "    /* Custom scrollbar */",
      "    ::-webkit-scrollbar {",
      "      width: 12px;",
      "    }",
      "    ",
      "    ::-webkit-scrollbar-track {",
      "      background: #1a0f1f;",
      "      border: 1px solid #2d1b69;",
      "    }",
      "    ",
      "    ::-webkit-scrollbar-thumb {",
      "      background: linear-gradient(180deg, #6b21a8, #4c1d95);",
      "      border-radius: 6px;",
      "    }",
      "    ",
      "    ::-webkit-scrollbar-thumb:hover {",
      "      background: linear-gradient(180deg, #7c3aed, #6b21a8);",
      "    }",
      "    ",
      "    body {",
      "      background: #0a0612;",
      "      background-image: ",
      "        radial-gradient(circle at 20% 50%, rgba(138, 43, 226, 0.1) 0%, transparent 50%),",
      "        radial-gradient(circle at 80% 80%, rgba(139, 92, 246, 0.1) 0%, transparent 50%),",
      "        radial-gradient(circle at 40% 20%, rgba(147, 51, 234, 0.1) 0%, transparent 50%);",
      "    }",
      "  </style>",
      "</head>",
      "<body class=\"min-h-screen text-purple-100\">",
      "  <!-- Smoke effects -->",
      "  <div class=\"fixed pointer-events-none\">",
      "    <div class=\"smoke-effect\" style=\"top: 10%; left: 10%;\"></div>",
      "    <div class=\"smoke-effect\" style=\"top: 60%; left: 80%; animation-delay: 1s;\"></div>",
      "    <div class=\"smoke-effect\" style=\"top: 80%; left: 30%; animation-delay: 2s;\"></div>",
      "    <div class=\"smoke-effect\" style=\"top: 30%; left: 60%; animation-delay: 3s;\"></div>",
      "  </div>",
      "",
      "  <!-- Header -->",
      "  <header class=\"relative z-10 text-center py-8 px-4\">",
      "    <h1 class=\"horror-font text-6xl md:text-8xl blood-text flicker mb-4\">",
      "      THE MEMORY ORACLE",
      "    </h1>",
      "    <p class=\"eerie-font text-2xl text-purple-300 float\">",
      "      \"Every memory has its price...\"",
      "    </p>",
      "    <div class=\"mt-4 text-yellow-500 text-xl\">",
      "      \u26a0\ufe0f <span class=\"glitch\" data-text=\"Insert coin to disturb the past\">Insert coin to disturb the past</span> \u26a0\ufe0f",
      "    </div>",
      "  </header>",
      "",
      "  <!-- Main Content -->",
      "  <main class=\"container mx-auto px-4 pb-16 relative z-10\">",
      "    <!-- Server URL Section (styled as mystical ritual) -->",
      "    <section class=\"mb-12 max-w-4xl mx-auto\">",
      "      <div class=\"tarot-card p-6 rounded-lg\">",
      "        <h2 class=\"creepy-font text-3xl text-purple-300 mb-4\">The Binding Ritual</h2>",
      "        <label for=\"sse-url\" class=\"block mystical-font text-lg text-purple-200 mb-2\">",
      "          Your Personal Summoning Incantation:",
      "        </label>",
      "        <div class=\"flex items-center space-x-3\">",
      "          <input",
      "            type=\"text\"",
      "            name=\"sse-url\"",
      "            id=\"sse-url\"",
      "            class=\"flex-grow cursed-input py-3 px-4 rounded-md text-purple-100 text-lg font-mono\"",
      "            readonly",
      "            placeholder=\"The spirits are gathering...\"",
      "          />",
      "          <button",
      "            id=\"copy-button\"",
      "            type=\"button\"",
      "            class=\"mystical-token px-6 py-3 rounded-md text-white font-bold hover:scale-105 transition-transform cursor-pointer\"",
      "            title=\"Seal the pact\"",
      "          >",
      "            \ud83d\udcdc Seal Pact",
      "          </button>",
      "        </div>",
      "        <p class=\"mt-3 text-sm text-purple-300 italic\">",
      "          Guard this incantation with your life. It binds your soul to the Oracle...",
      "        </p>",
      "        ",
      "        <!-- Configuration buttons -->",
      "        <div class=\"mt-4 flex gap-2 justify-center\">",
      "          <button onclick=\"showConfigInstructions('cursor')\" class=\"text-purple-400 hover:text-purple-300 text-sm underline\">",
      "            Cursor Ritual",
      "          </button>",
      "          <span class=\"text-purple-500\">\u2022</span>",
      "          <button onclick=\"showConfigInstructions('claude')\" class=\"text-purple-400 hover:text-purple-300 text-sm underline\">",
      "            Claude Ritual",
      "          </button>",
      "          <span class=\"text-purple-500\">\u2022</span>",
      "          <button onclick=\"showConfigInstructions('windsurf')\" class=\"text-purple-400 hover:text-purple-300 text-sm underline\">",
      "            Windsurf Ritual",
      "          </button>",
      "        </div>",
      "      </div>",
      "    </section>",
      "",
      "    <!-- Coin Slot Section -->",
      "    <section class=\"mb-12 text-center\">",
      "      <div class=\"inline-block\">",
      "        <div class=\"coin-slot w-32 h-2 rounded-full mx-auto mb-4\"></div>",
      "        <button",
      "          id=\"insert-coin\"",
      "          class=\"mystical-token px-8 py-4 rounded-full text-xl font-bold hover:scale-110 transition-all cursor-pointer glow\"",
      "        >",
      "          \ud83e\ude99 INSERT COIN",
      "        </button>",
      "        <p class=\"mt-2 text-purple-400 text-sm\" id=\"wishes-counter\">",
      "          <span class=\"blood-text\">3</span> wishes remain...",
      "        </p>",
      "      </div>",
      "    </section>",
      "",
      "    <!-- Crystal Ball Search Section -->",
      "    <section id=\"crystal-ball-section\" class=\"mb-12 max-w-4xl mx-auto hidden\">",
      "      <div class=\"crystal-ball rounded-3xl p-8 relative overflow-hidden\">",
      "        <h2 class=\"creepy-font text-4xl text-center mb-6 text-purple-200\">",
      "          Gaze Into The Void",
      "        </h2>",
      "        ",
      "        <!-- Namespace Selection -->",
      "        <div class=\"mb-6\">",
      "          <p class=\"mystical-font text-lg text-purple-300 mb-3\">",
      "            Choose your cursed realms wisely...",
      "          </p>",
      "          <div class=\"flex flex-wrap gap-2 mb-4\" id=\"namespace-tokens\">",
      "            <!-- Namespace tokens will be dynamically added here -->",
      "          </div>",
      "          <div class=\"flex gap-2\">",
      "            <button id=\"select-all-namespaces\" class=\"text-sm text-purple-400 hover:text-purple-300\">",
      "              \u2726 Summon All Realms \u2726",
      "            </button>",
      "            <button id=\"clear-namespaces\" class=\"text-sm text-purple-400 hover:text-purple-300\">",
      "              \u2726 Banish All \u2726",
      "            </button>",
      "          </div>",
      "        </div>",
      "",
      "        <!-- Search Input -->",
      "        <div class=\"relative\">",
      "          <input",
      "            type=\"text\"",
      "            id=\"oracle-query\"",
      "            class=\"w-full cursed-input py-4 px-6 rounded-lg text-lg text-purple-100\"",
      "            placeholder=\"Whisper your darkest query...\"",
      "          />",
      "          <button",
      "            id=\"consult-oracle\"",
      "            class=\"absolute right-2 top-2 mystical-token px-6 py-2 rounded-md font-bold hover:scale-105 transition-transform\"",
      "          >",
      "            \ud83d\udd2e Consult",
      "          </button>",
      "        </div>",
      "        ",
      "        <p class=\"mt-4 text-center text-purple-400 italic\" id=\"oracle-warning\">",
      "          Some memories were meant to stay buried...",
      "        </p>",
      "      </div>",
      "    </section>",
      "",
      "    <!-- Tabs Section -->",
      "    <section class=\"max-w-6xl mx-auto mb-8 hidden\" id=\"tabs-section\">",
      "      <div class=\"flex justify-center space-x-4 mb-6\">",
      "        <button",
      "          data-tab=\"recent\"",
      "          class=\"tab-button active mystical-token px-6 py-3 rounded-t-lg font-bold transition-all\"",
      "        >",
      "          \ud83d\udcc5 Recent Visions",
      "        </button>",
      "        <button",
      "          data-tab=\"search\"",
      "          class=\"tab-button mystical-token px-6 py-3 rounded-t-lg font-bold transition-all opacity-60\"",
      "        >",
      "          \ud83d\udd2e Oracle Results",
      "        </button>",
      "        <button",
      "          data-tab=\"browse\"",
      "          class=\"tab-button mystical-token px-6 py-3 rounded-t-lg font-bold transition-all opacity-60\"",
      "        >",
      "          \ud83d\udcda Cursed Archives",
      "        </button>",
      "      </div>",
      "    </section>",
      "",
      "    <!-- Memories Display Section -->",
      "    <section id=\"memories-display\" class=\"max-w-6xl mx-auto hidden\">",
      "      <div class=\"tarot-card rounded-lg p-6\">",
      "        <div id=\"memories-container\" class=\"space-y-4\">",
      "          <!-- Memories will be dynamically loaded here -->",
      "        </div>",
      "        ",
      "        <!-- Pagination -->",
      "        <div id=\"pagination\" class=\"mt-6 text-center hidden\">",
      "          <button id=\"load-more\" class=\"mystical-token px-8 py-3 rounded-md font-bold hover:scale-105 transition-transform\">",
      "            \ud83d\udcdc Unroll More Scrolls...",
      "          </button>",
      "        </div>",
      "      </div>",
      "    </section>",
      "",
      "    <!-- Fortune Output -->",
      "    <div id=\"fortune-output\" class=\"fixed bottom-4 right-4 max-w-sm hidden\">",
      "      <div class=\"fortune-paper p-4 rounded shadow-2xl\">",
      "        <p class=\"text-black font-mono text-sm\" id=\"fortune-text\"></p>",
      "      </div>",
      "    </div>",
      "",
      "    <!-- Configuration Instructions Modal -->",
      "    <div id=\"config-modal\" class=\"fixed inset-0 bg-black bg-opacity-75 z-50 hidden\">",
      "      <div class=\"flex items-center justify-center min-h-screen p-4\">",
      "        <div class=\"tarot-card max-w-2xl w-full p-8 rounded-lg relative max-h-[90vh] overflow-y-auto\">",
      "          <button onclick=\"closeConfigModal()\" class=\"absolute top-4 right-4 text-purple-300 hover:text-purple-100 text-2xl\">",
      "            \u2715",
      "          </button>",
      "          <h2 class=\"creepy-font text-3xl text-purple-300 mb-6\">The Sacred Incantations</h2>",
      "          <div id=\"config-content\" class=\"space-y-6 text-purple-100\">",
      "            <!-- Config content will be loaded here -->",
      "          </div>",
      "        </div>",
      "      </div>",
      "    </div>",
      "  </main>",
      "",
      "  <!-- Footer -->",
      "  <footer class=\"text-center py-8 text-purple-400 text-sm mystical-font\">",
      "    <p>The Oracle's power flows through Cloudflare's darkest magics...</p>",
      "    <p class=\"mt-2 text-purple-500\">Workers, Vectorize, and D1 bind the memories for eternity</p>",
      "  </footer>",
      "",
      "  <!-- Include the JavaScript -->",
      "  <script src=\"oracle.js\"></script>",
      "</body>",
      "</html>",
      ""
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx": [
      " "
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/admin.html": [
      " "
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/components/UserTree.tsx": [
      " "
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/admin.tsx": [
      " "
    ],
    "file:///Users/redaphid/Projects/mcp-memory/package.json": [
      "{",
      "\t\"name\": \"mcp-memory\",",
      "\t\"version\": \"0.0.1\",",
      "\t\"private\": true,",
      "\t\"scripts\": {",
      "\t\t\"deploy\": \"wrangler deploy\",",
      "\t\t\"dev\": \"wrangler dev --experimental-vectorize-bind-to-prod\",",
      "\t\t\"format\": \"biome format --write\",",
      "\t\t\"lint:fix\": \"biome lint --fix\",",
      "\t\t\"start\": \"wrangler dev\",",
      "\t\t\"cf-typegen\": \"wrangler types\"",
      "\t},",
      "\t\"devDependencies\": {",
      "\t\t\"@cloudflare/workers-types\": \"^4.20250421.0\",",
      "\t\t\"@types/node\": \"^22.14.1\",",
      "\t\t\"@types/uuid\": \"^10.0.0\",",
      "\t\t\"typescript\": \"^5.5.2\",",
      "\t\t\"workers-mcp\": \"^0.1.0-3\",",
      "\t\t\"wrangler\": \"^4.6.0\"",
      "\t},",
      "\t\"dependencies\": {",
      "\t\t\"@modelcontextprotocol/sdk\": \"^1.7.0\",",
      "\t\t\"agents\": \"^0.0.60\",",
      "\t\t\"hono\": \"^4.7.4\",",
      "\t\t\"uuid\": \"^11.1.0\",",
      "\t\t\"zod\": \"^3.24.2\"",
      "\t}",
      "}",
      ""
    ],
    "file:///Users/redaphid/Projects/mcp-memory/static/admin.js": [
      " "
    ]
  },
  "newlyCreatedFiles": [],
  "newlyCreatedFolders": [],
  "lastUpdatedAt": 1750218666427,
  "createdAt": 1750217338240,
  "hasChangedContext": true,
  "capabilities": [
    {
      "type": 15,
      "data": {
        "bubbleDataMap": "{}"
      }
    },
    {
      "type": 17,
      "data": {}
    },
    {
      "type": 14,
      "data": {}
    },
    {
      "type": 22,
      "data": {}
    },
    {
      "type": 18,
      "data": {}
    },
    {
      "type": 19,
      "data": {}
    },
    {
      "type": 23,
      "data": {}
    },
    {
      "type": 6,
      "data": {}
    },
    {
      "type": 16,
      "data": {}
    },
    {
      "type": 24,
      "data": {}
    },
    {
      "type": 25,
      "data": {}
    },
    {
      "type": 21,
      "data": {}
    }
  ],
  "name": "Update mcp server for read-only user search",
  "codebaseSearchSettings": {},
  "isFileListExpanded": false,
  "unifiedMode": "agent",
  "forceMode": "edit",
  "usageData": {
    "default": {
      "costInCents": 24,
      "amount": 6
    },
    "claude-4-sonnet-thinking": {
      "costInCents": 18,
      "amount": 6
    }
  },
  "allAttachedFileCodeChunksUris": [
    "file:///Users/redaphid/Projects/mcp-memory/README.md",
    "file:///Users/redaphid/Projects/mcp-memory/src/index.ts",
    "file:///Users/redaphid/Projects/mcp-memory/static/oracle.js",
    "file:///Users/redaphid/Projects/mcp-memory/src/mcp.ts",
    "file:///Users/redaphid/Projects/mcp-memory/static/index.html",
    "file:///Users/redaphid/Projects/mcp-memory/static/components/UserTree.jsx",
    "file:///Users/redaphid/Projects/mcp-memory/static/admin.html",
    "file:///Users/redaphid/Projects/mcp-memory/static/components/UserTree.tsx",
    "file:///Users/redaphid/Projects/mcp-memory/static/admin.tsx",
    "file:///Users/redaphid/Projects/mcp-memory/package.json",
    "file:///Users/redaphid/Projects/mcp-memory/static/admin.js"
  ],
  "subComposerIds": [],
  "latestConversationSummary": {
    "summary": {
      "summary": "<summary>\n- The user initially requested to extract data from a deployed MCP server and update it to search for memories across all users in a read-only manner, which the assistant implemented by adding a new endpoint and updating the frontend.\n- The user then asked for a UI to search for all memories, which led to the creation of a \"Search All Realms\" button in the interface, allowing users to search across all namespaces.\n- After deploying the changes, the user reported not seeing the button, prompting the assistant to investigate the HTML and JavaScript, leading to the discovery of a hidden section and duplicate elements.\n- The user requested a tree structure displaying users and their recent memories using React, which the assistant implemented by creating a new React component and an admin page to display this information.\n- Finally, the user encountered a MIME type error when loading the module script",
      "truncationLastBubbleIdInclusive": "0f6af845-944e-4dc0-8a81-4adc7884530c",
      "clientShouldStartSendingFromInclusiveBubbleId": "8795f098-57ad-4eb1-b5df-c86d68be5b8a",
      "previousConversationSummaryBubbleId": "",
      "includesToolResults": false
    },
    "lastBubbleId": "7391287b-d475-44f4-8944-063c2d4c3624"
  },
  "latestChatGenerationUUID": "71fc7f8f-05ce-4bd0-88d3-7547987b70aa",
  "isAgentic": true
}